pipeline:
  name: test-electron2
  identifier: testelectron2
  projectIdentifier: NgLabs
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: linux-make-src-cache
        identifier: linuxmakesrccache
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - stepGroup:
                  name: electron-build
                  identifier: electronbuild
                  steps:
                    - step:
                        type: Run
                        name: Install gnu-tar on macos
                        identifier: Install_gnutar_on_macos
                        spec:
                          shell: Bash
                          command: |-
                            #!/bin/bash -eo pipefail
                            if [ "`uname`" == "Darwin" ]; then
                              if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
                                brew update
                                brew install gnu-tar
                              fi
                              ln -fs /usr/local/bin/gtar /usr/local/bin/tar
                            fi
                    - step:
                        type: Run
                        name: Install python2 on mac
                        identifier: Install_python2_on_mac
                        spec:
                          shell: Bash
                          command: |
                            #!/bin/bash -eo pipefail
                            if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                              if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                                mkdir python-downloads
                                echo 'Downloading Python 2.7.18'
                                curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                                mv python-2.7.18-macosx10.9.pkg python-downloads
                              else
                                echo 'Using Python install from cache'
                              fi
                              sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                            fi
                    - step:
                        type: SaveCacheGCS
                        name: Persisting python cache
                        identifier: Persisting_python_cache
                        spec:
                          connectorRef: gcpdhruba
                          bucket: test-electron
                          key: v2.7.18-python-cache-{{ arch }}
                          sourcePaths:
                            - python-downloads
                          archiveFormat: Tar
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: SaveCacheGCS
                        name: Persisting brew cache
                        identifier: Persisting_brew_cache
                        spec:
                          connectorRef: gcpdhruba
                          bucket: test-electron
                          key: v5-brew-cache-{{ arch }}
                          sourcePaths:
                            - /usr/local/Cellar/gnu-tar
                            - /usr/local/bin/gtar
                          archiveFormat: Tar
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Get depot tools
                        identifier: Get_depot_tools
                        spec:
                          shell: Bash
                          command: |-
                            #!/bin/bash -eo pipefail
                            git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                            if [ "`uname`" == "Darwin" ]; then
                              # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                              sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                            else
                              sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                              # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                              cd depot_tools
                              patch gclient.py -R <<'EOF'
                            676,677c676
                            <         packages = dep_value.get('packages', [])
                            <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                            ---
                            >         for package in dep_value.get('packages', []):
                            EOF
                            fi
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Add depot tools to path
                        identifier: Add_depot_tools_to_path
                        spec:
                          shell: Bash
                          command: |-
                            #!/bin/bash -eo pipefail
                            echo 'export PATH="$PATH:'"$PWD"'/depot_tools"'
                            export PATH="$PATH:/harness/depot_tools"
                            echo $PATH >> $ENV
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Freeup space on MacOS
                        identifier: Freeup_space_on_MacOS
                        spec:
                          shell: Bash
                          command: |-
                            #!/bin/bash -eo pipefail
                            if [ "`uname`" == "Darwin" ]; then
                              sudo mkdir -p $TMPDIR/del-target

                              tmpify() {
                                if [ -d "$1" ]; then
                                  sudo mv "$1" $TMPDIR/del-target/$(echo $1|shasum -a 256|head -n1|cut -d " " -f1)
                                fi
                              }

                              strip_arm_deep() {
                                opwd=$(pwd)
                                cd $1
                                f=$(find . -perm +111 -type f)
                                for fp in $f
                                do
                                  if [[ $(file "$fp") == *"universal binary"* ]]; then
                                    if [[ $(file "$fp") == *"arm64e)"* ]]; then
                                      sudo lipo -remove arm64e "$fp" -o "$fp" || true
                                    fi
                                    if [[ $(file "$fp") == *"arm64)"* ]]; then
                                      sudo lipo -remove arm64 "$fp" -o "$fp" || true
                                    fi
                                  fi
                                done

                                cd $opwd
                              }

                              tmpify /Library/Developer/CoreSimulator
                              tmpify ~/Library/Developer/CoreSimulator
                              tmpify $(xcode-select -p)/Platforms/AppleTVOS.platform
                              tmpify $(xcode-select -p)/Platforms/iPhoneOS.platform
                              tmpify $(xcode-select -p)/Platforms/WatchOS.platform
                              tmpify $(xcode-select -p)/Platforms/WatchSimulator.platform
                              tmpify $(xcode-select -p)/Platforms/AppleTVSimulator.platform
                              tmpify $(xcode-select -p)/Platforms/iPhoneSimulator.platform
                              tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/metal/ios
                              tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift
                              tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0
                              tmpify ~/.rubies
                              tmpify ~/Library/Caches/Homebrew
                              tmpify /usr/local/Homebrew
                              sudo rm -rf $TMPDIR/del-target

                              # sudo rm -rf "/System/Library/Desktop Pictures"
                              # sudo rm -rf /System/Library/Templates/Data
                              # sudo rm -rf /System/Library/Speech/Voices
                              # sudo rm -rf "/System/Library/Screen Savers"
                              # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs
                              # sudo rm -rf "/System/Volumes/Data/Library/Application Support/Apple/Photos/Print Products"
                              # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/
                              # sudo rm -rf /System/Volumes/Data/Library/Java
                              # sudo rm -rf /System/Volumes/Data/Library/Ruby
                              # sudo rm -rf /System/Volumes/Data/Library/Printers
                              # sudo rm -rf /System/iOSSupport
                              # sudo rm -rf /System/Applications/*.app
                              # sudo rm -rf /System/Applications/Utilities/*.app
                              # sudo rm -rf /System/Library/LinguisticData
                              # sudo rm -rf /System/Volumes/Data/private/var/db/dyld/*
                              # sudo rm -rf /System/Library/Fonts/*
                              # sudo rm -rf /System/Library/PreferencePanes
                              # sudo rm -rf /System/Library/AssetsV2/*
                              sudo rm -rf /Applications/Safari.app
                              sudo rm -rf ~/project/src/build/linux
                              sudo rm -rf ~/project/src/third_party/catapult/tracing/test_data
                              sudo rm -rf ~/project/src/third_party/angle/third_party/VK-GL-CTS

                              # lipo off some huge binaries arm64 versions to save space
                              strip_arm_deep $(xcode-select -p)/../SharedFrameworks
                              # strip_arm_deep /System/Volumes/Data/Library/Developer/CommandLineTools/usr
                            fi
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Generate deps hash
                        identifier: Generate_deps_hash
                        spec:
                          shell: Bash
                          command: node src/electron/script/generate-deps-hash.js && cat src/electron/.depshash-target
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Touch sync done
                        identifier: Touch_sync_done
                        spec:
                          shell: Bash
                          command: |
                            touch src/electron/.circle-sync-done
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Prepare for cross OS sync restore
                        identifier: Prepare_for_cross_OS_sync_restore
                        spec:
                          shell: Bash
                          command: |-
                            sudo mkdir -p /var/portal
                            sudo chown -R $(id -u):$(id -g) /var/portal
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: RestoreCacheGCS
                        name: Restoring src cache marker
                        identifier: Restoring_src_cache_marker
                        spec:
                          connectorRef: gcpdhruba
                          bucket: test-electron
                          key: v16-src-cache-marker-{{ checksum "src/electron/.depshash" }}
                          archiveFormat: Tar
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Halt the job early if the src cache exists
                        identifier: Halt_the_job_early_if_the_src_cache_exists
                        spec:
                          shell: Bash
                          command: |2-
                                              if [ -f ".src-cache-marker" ]; then
                                                circleci-agent step halt
                                              fi
                        when:
                          stageStatus: All
                        failureStrategies: []
                  when:
                    stageStatus: All
                  failureStrategies: []
                  spec: {}
        variables:
          - name: GCLIENT_EXTRA_ARGS
            type: String
            description: ""
            value: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
          - name: NUMBER_OF_NINJA_PROCESSES
            type: String
            description: ""
            value: "34"
          - name: ELECTRON_OUT_DIR
            type: String
            description: ""
            value: Default
    - stage:
        name: build-mac
        identifier: buildmac
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Install gnu-tar on macos
                  identifier: Install_gnutar_on_macos
                  spec:
                    shell: Sh
                    command: |-
                      if [ "`uname`" == "Darwin" ]; then
                        if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
                          brew update
                          brew install gnu-tar
                        fi
                        ln -fs /usr/local/bin/gtar /usr/local/bin/tar
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: RestoreCacheGCS
                  name: Restore python cache
                  identifier: Restore_python_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v2.7.18-python-cache-{{ arch }}
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Install python2 on macOs
                  identifier: Install_python2_on_macOs
                  spec:
                    shell: Sh
                    command: |-
                      if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                        if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                          mkdir python-downloads
                          echo 'Downloading Python 2.7.18'
                          curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                          mv python-2.7.18-macosx10.9.pkg python-downloads
                        else
                          echo 'Using Python install from cache'
                        fi
                        sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: SaveCacheGCS
                  name: Persisting python cache
                  identifier: Persisting_python_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v2.7.18-python-cache-{{ arch }}
                    sourcePaths:
                      - python-downloads
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: SaveCacheGCS
                  name: Persisting brew cache
                  identifier: Persisting_brew_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v5-brew-cache-{{ arch }}
                    sourcePaths:
                      - /usr/local/Cellar/gnu-tar
                      - /usr/local/bin/gtar
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Get depot tools
                  identifier: Get_depot_tools
                  spec:
                    shell: Sh
                    command: |
                      git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                      if [ "`uname`" == "Darwin" ]; then
                        # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                        sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                      else
                        sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                        # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                        cd depot_tools
                        patch gclient.py -R <<'EOF'
                      676,677c676
                      <         packages = dep_value.get('packages', [])
                      <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                      ---
                      >         for package in dep_value.get('packages', []):
                      EOF
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Add depot tools to path
                  identifier: Add_depot_tools_to_path
                  spec:
                    shell: Sh
                    command: |
                      echo 'export PATH="$PATH:'"$PWD"'/depot_tools"' >> $BASH_ENV
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Free up space on MacOS
                  identifier: Free_up_space_on_MacOS
                  spec:
                    shell: Sh
                    command: |
                      if [ "`uname`" == "Darwin" ]; then
                        sudo mkdir -p $TMPDIR/del-target

                        tmpify() {
                          if [ -d "$1" ]; then
                            sudo mv "$1" $TMPDIR/del-target/$(echo $1|shasum -a 256|head -n1|cut -d " " -f1)
                          fi
                        }

                        strip_arm_deep() {
                          opwd=$(pwd)
                          cd $1
                          f=$(find . -perm +111 -type f)
                          for fp in $f
                          do
                            if [[ $(file "$fp") == *"universal binary"* ]]; then
                              if [[ $(file "$fp") == *"arm64e)"* ]]; then
                                sudo lipo -remove arm64e "$fp" -o "$fp" || true
                              fi
                              if [[ $(file "$fp") == *"arm64)"* ]]; then
                                sudo lipo -remove arm64 "$fp" -o "$fp" || true
                              fi
                            fi
                          done

                          cd $opwd
                        }

                        tmpify /Library/Developer/CoreSimulator
                        tmpify ~/Library/Developer/CoreSimulator
                        tmpify $(xcode-select -p)/Platforms/AppleTVOS.platform
                        tmpify $(xcode-select -p)/Platforms/iPhoneOS.platform
                        tmpify $(xcode-select -p)/Platforms/WatchOS.platform
                        tmpify $(xcode-select -p)/Platforms/WatchSimulator.platform
                        tmpify $(xcode-select -p)/Platforms/AppleTVSimulator.platform
                        tmpify $(xcode-select -p)/Platforms/iPhoneSimulator.platform
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/metal/ios
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0
                        tmpify ~/.rubies
                        tmpify ~/Library/Caches/Homebrew
                        tmpify /usr/local/Homebrew
                        sudo rm -rf $TMPDIR/del-target

                        # sudo rm -rf "/System/Library/Desktop Pictures"
                        # sudo rm -rf /System/Library/Templates/Data
                        # sudo rm -rf /System/Library/Speech/Voices
                        # sudo rm -rf "/System/Library/Screen Savers"
                        # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs
                        # sudo rm -rf "/System/Volumes/Data/Library/Application Support/Apple/Photos/Print Products"
                        # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/
                        # sudo rm -rf /System/Volumes/Data/Library/Java
                        # sudo rm -rf /System/Volumes/Data/Library/Ruby
                        # sudo rm -rf /System/Volumes/Data/Library/Printers
                        # sudo rm -rf /System/iOSSupport
                        # sudo rm -rf /System/Applications/*.app
                        # sudo rm -rf /System/Applications/Utilities/*.app
                        # sudo rm -rf /System/Library/LinguisticData
                        # sudo rm -rf /System/Volumes/Data/private/var/db/dyld/*
                        # sudo rm -rf /System/Library/Fonts/*
                        # sudo rm -rf /System/Library/PreferencePanes
                        # sudo rm -rf /System/Library/AssetsV2/*
                        sudo rm -rf /Applications/Safari.app
                        sudo rm -rf ~/project/src/build/linux
                        sudo rm -rf ~/project/src/third_party/catapult/tracing/test_data
                        sudo rm -rf ~/project/src/third_party/angle/third_party/VK-GL-CTS

                        # lipo off some huge binaries arm64 versions to save space
                        strip_arm_deep $(xcode-select -p)/../SharedFrameworks
                        # strip_arm_deep /System/Volumes/Data/Library/Developer/CommandLineTools/usr
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Generate deps hash
                  identifier: Generate_deps_hash
                  spec:
                    shell: Sh
                    command: |
                      node src/electron/script/generate-deps-hash.js && cat src/electron/.depshash-target
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Touch sync done
                  identifier: Touch_sync_done
                  spec:
                    shell: Sh
                    command: |
                      touch src/electron/.circle-sync-done
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Prepare for cross OS sync restore
                  identifier: Prepare_for_cross_OS_sync_restore
                  spec:
                    shell: Sh
                    command: |-
                      sudo mkdir -p /var/portal
                      sudo chown -R $(id -u):$(id -g) /var/portal
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: RestoreCacheGCS
                  name: Restoring src cache marker
                  identifier: Restoring_src_cache_marker
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v16-src-cache-marker-{{ checksum "src/electron/.depshash" }}
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Halt the job early if the src cache exists
                  identifier: Halt_the_job_early_if_the_src_cache_exists
                  spec:
                    shell: Sh
                    command: |
                      if [ -f ".src-cache-marker" ]; then
                        circleci-agent step halt
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: RestoreCacheGCS
                  name: Restoring src cache
                  identifier: Restoring_src_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v16-src-cache-{{ checksum "src/electron/.depshash" }}
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Fix the src cache restore point on macOS
                  identifier: Fix_the_src_cache_restore_point_on_macOS
                  spec:
                    shell: Sh
                    command: |-
                      if [ -d "/var/portal/src" ]; then
                        echo Relocating Cache
                        rm -rf src
                        mv /var/portal/src ./
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Set GIT_CACHE_PATH to make gclient to use the cache
                  identifier: Set_GIT_CACHE_PATH_to_make_gclient_to_use_the_cache
                  spec:
                    shell: Sh
                    command: echo 'export GIT_CACHE_PATH="$PWD/git-cache"' >> $BASH_ENV
                  when:
                    stageStatus: All
                  failureStrategies: []
        when:
          pipelineStatus: All
    - stage:
        name: lint
        identifier: lint
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Setup third party depot tools
                  identifier: Setup_third_party_depot_tools
                  spec:
                    shell: Sh
                    command: |-
                      # "depot_tools" has to be checkout into "//third_party/depot_tools" so pylint.py can a "pylintrc" file.
                      git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git src/third_party/depot_tools
                      echo 'export PATH="$PATH:'"$PWD"'/src/third_party/depot_tools"' >> $BASH_ENV
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Download GN Binary
                  identifier: Download_GN_Binary
                  spec:
                    shell: Sh
                    command: |-
                      chromium_revision="$(grep -A1 chromium_version src/electron/DEPS | tr -d '\n' | cut -d\' -f4)"
                      gn_version="$(curl -sL "https://chromium.googlesource.com/chromium/src/+/${chromium_revision}/DEPS?format=TEXT" | base64 -d | grep gn_version | head -n1 | cut -d\' -f4)"

                      cipd ensure -ensure-file - -root . <<-CIPD
                      \$ServiceURL https://chrome-infra-packages.appspot.com/
                      @Subdir src/buildtools/linux64
                      gn/gn/linux-amd64 $gn_version
                      CIPD

                      echo 'export CHROMIUM_BUILDTOOLS_PATH="'"$PWD"'/src/buildtools"' >> $BASH_ENV
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Download clang format binary
                  identifier: Download_clang_format_binary
                  spec:
                    shell: Sh
                    command: |-
                      chromium_revision="$(grep -A1 chromium_version src/electron/DEPS | tr -d '\n' | cut -d\' -f4)"

                      sha1_path='buildtools/linux64/clang-format.sha1'
                      curl -sL "https://chromium.googlesource.com/chromium/src/+/${chromium_revision}/${sha1_path}?format=TEXT" | base64 -d > "src/${sha1_path}"

                      download_from_google_storage.py --no_resume --no_auth --bucket chromium-clang-format -s "src/${sha1_path}"
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Run lint
                  identifier: Run_lint
                  spec:
                    shell: Sh
                    command: |-
                      # gn.py tries to find a gclient root folder starting from the current dir.
                      # When it fails and returns "None" path, the whole script fails. Let's "fix" it.
                      touch .gclient
                      # Another option would be to checkout "buildtools" inside the Electron checkout,
                      # but then we would lint its contents (at least gn format), and it doesn't pass it.

                      cd src/electron
                      node script/yarn install --frozen-lockfile
                      node script/yarn lint
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Run script type checker
                  identifier: Run_script_type_checker
                  spec:
                    shell: Sh
                    command: |-
                      cd src/electron
                      node script/yarn tsc -p tsconfig.script.json
                  when:
                    stageStatus: All
                  failureStrategies: []
        when:
          pipelineStatus: All
    - stage:
        name: docs-only
        identifier: docsonly
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Install node modules
                  identifier: Install_node_modules
                  spec:
                    shell: Sh
                    command: |-
                      cd src/electron
                      node script/yarn install --frozen-lockfile
              - step:
                  type: Run
                  name: Run TS and JS compile on doc only change
                  identifier: Run_TS_and_JS_compile_on_doc_only_change
                  spec:
                    shell: Sh
                    command: |-
                      cd src/electron
                      node script/yarn create-typescript-definitions
                      node script/yarn tsc -p tsconfig.default_app.json --noEmit
                      for f in build/webpack/*.js
                      do
                        out="${f:29}"
                        if [ "$out" != "base.js" ]; then
                          node script/yarn webpack --config $f --output-filename=$out --output-path=./.tmp --env mode=development
                        fi
                      done
                  when:
                    stageStatus: All
                  failureStrategies: []
        when:
          pipelineStatus: All
  properties:
    ci:
      codebase:
        connectorRef: gitconnectordhruba
        repoName: electron
        build: <+input>
  allowStageExecutions: true
