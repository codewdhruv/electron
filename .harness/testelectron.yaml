pipeline:
  name: test-electron
  identifier: testelectron
  projectIdentifier: NgLabs
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: gitconnectordhruba
        repoName: electron
        build: <+input>
  stages:
    - stage:
        name: electron-build
        identifier: electronbuild
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - stepGroup:
                  name: Build-Pre-Condition
                  identifier: BuildPreCondition
                  steps:
                    - step:
                        type: Run
                        name: attach_workspace
                        identifier: Run_1
                        spec:
                          shell: Sh
                          command: rm -rf src/electron
                    - step:
                        type: Run
                        name: step-depot-tools
                        identifier: stepdepottools
                        spec:
                          shell: Sh
                          command: |2-
                                  if [ "`uname`" == "Darwin" ]; then
                                    if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
                                      brew update
                                      brew install gnu-tar
                                    fi
                                    ln -fs /usr/local/bin/gtar /usr/local/bin/tar
                                  fi
                    - step:
                        type: Run
                        name: install-python2-mac
                        identifier: installpython2mac
                        spec:
                          shell: Sh
                          command: |-
                            if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                                if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                                mkdir python-downloads
                                echo 'Downloading Python 2.7.18'
                                curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                                mv python-2.7.18-macosx10.9.pkg python-downloads
                                else
                                echo 'Using Python install from cache'
                                fi
                                sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                            fi
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: step-setup-goma-for-build
                        identifier: stepsetupgomaforbuild
                        spec:
                          shell: Sh
                          command: |2-
                                  echo 'export NUMBER_OF_NINJA_PROCESSES=300' >> $BASH_ENV
                                  if [ "`uname`" == "Darwin" ]; then
                                    echo 'ulimit -n 10000' >> $BASH_ENV
                                    echo 'sudo launchctl limit maxfiles 65536 200000' >> $BASH_ENV
                                  fi
                                  if [ ! -z "$RAW_GOMA_AUTH" ]; then
                                    echo $RAW_GOMA_AUTH > ~/.goma_oauth2_config
                                  fi
                                  git clone https://github.com/electron/build-tools.git
                                  cd build-tools
                                  npm install
                                  mkdir third_party
                                  node -e "require('./src/utils/goma.js').downloadAndPrepare({ gomaOneForAll: true })"
                                  export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                                  third_party/goma/goma_ctl.py ensure_start
                                  if [ ! -z "$RAW_GOMA_AUTH" ] && [ "`third_party/goma/goma_auth.py info`" != "Login as Fermi Planck" ]; then
                                    echo "WARNING!!!!!! Goma authentication is incorrect; please update Goma auth token."
                                    exit 1
                                  fi
                                  echo 'export GN_GOMA_FILE='`node -e "console.log(require('./src/utils/goma.js').gnFilePath)"` >> $BASH_ENV
                                  echo 'export LOCAL_GOMA_DIR='`node -e "console.log(require('./src/utils/goma.js').dir)"` >> $BASH_ENV
                                  echo 'export GOMA_FALLBACK_ON_AUTH_FAILURE=true' >> $BASH_ENV
                                  cd ..
                                  touch "${TMPDIR:=/tmp}"/.goma-ready
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: SaveCacheGCS
                        name: step-save-brew-cache
                        identifier: stepsavebrewcache
                        spec:
                          connectorRef: gcpdhruba
                          bucket: test-electron
                          key: v5-brew-cache-{{ arch }}
                          sourcePaths:
                            - /usr/local/Cellar/gnu-tar
                            - /usr/local/bin/gtar
                          archiveFormat: Tar
              - parallel:
                  - step:
                      type: Run
                      name: step-depot-tools-get
                      identifier: stepdepottoolsget
                      spec:
                        shell: Sh
                        command: |2-
                                git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                                if [ "`uname`" == "Darwin" ]; then
                                  # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                                  sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                                else
                                  sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                                  # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                                  cd depot_tools
                                  patch gclient.py -R \<<'EOF'
                                676,677c676
                                <         packages = dep_value.get('packages', [])
                                <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                                ---
                                >         for package in dep_value.get('packages', []):
                                EOF
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-depot-tools-add-to-path
                      identifier: stepdepottoolsaddtopath
                      spec:
                        shell: Sh
                        command: echo 'export PATH="$PATH:'"$PWD"'/depot_tools"' >> $BASH_ENV
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-get-more-space-on-mac
                      identifier: stepgetmorespaceonmac
                      spec:
                        shell: Sh
                        command: |2-
                                if [ "`uname`" == "Darwin" ]; then
                                  sudo mkdir -p $TMPDIR/del-target
                                  tmpify() {
                                    if [ -d "$1" ]; then
                                      sudo mv "$1" $TMPDIR/del-target/$(echo $1|shasum -a 256|head -n1|cut -d " " -f1)
                                    fi
                                  }
                                  strip_arm_deep() {
                                    opwd=$(pwd)
                                    cd $1
                                    f=$(find . -perm +111 -type f)
                                    for fp in $f
                                    do
                                      if [[ $(file "$fp") == *"universal binary"* ]]; then
                                        if [[ $(file "$fp") == *"arm64e)"* ]]; then
                                          sudo lipo -remove arm64e "$fp" -o "$fp" || true
                                        fi
                                        if [[ $(file "$fp") == *"arm64)"* ]]; then
                                          sudo lipo -remove arm64 "$fp" -o "$fp" || true
                                        fi
                                      fi
                                    done
                                    cd $opwd
                                  }
                                  tmpify /Library/Developer/CoreSimulator
                                  tmpify ~/Library/Developer/CoreSimulator
                                  tmpify $(xcode-select -p)/Platforms/AppleTVOS.platform
                                  tmpify $(xcode-select -p)/Platforms/iPhoneOS.platform
                                  tmpify $(xcode-select -p)/Platforms/WatchOS.platform
                                  tmpify $(xcode-select -p)/Platforms/WatchSimulator.platform
                                  tmpify $(xcode-select -p)/Platforms/AppleTVSimulator.platform
                                  tmpify $(xcode-select -p)/Platforms/iPhoneSimulator.platform
                                  tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/metal/ios
                                  tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift
                                  tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0
                                  tmpify ~/.rubies
                                  tmpify ~/Library/Caches/Homebrew
                                  tmpify /usr/local/Homebrew
                                  sudo rm -rf $TMPDIR/del-target
                                  # sudo rm -rf "/System/Library/Desktop Pictures"
                                  # sudo rm -rf /System/Library/Templates/Data
                                  # sudo rm -rf /System/Library/Speech/Voices
                                  # sudo rm -rf "/System/Library/Screen Savers"
                                  # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs
                                  # sudo rm -rf "/System/Volumes/Data/Library/Application Support/Apple/Photos/Print Products"
                                  # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/
                                  # sudo rm -rf /System/Volumes/Data/Library/Java
                                  # sudo rm -rf /System/Volumes/Data/Library/Ruby
                                  # sudo rm -rf /System/Volumes/Data/Library/Printers
                                  # sudo rm -rf /System/iOSSupport
                                  # sudo rm -rf /System/Applications/*.app
                                  # sudo rm -rf /System/Applications/Utilities/*.app
                                  # sudo rm -rf /System/Library/LinguisticData
                                  # sudo rm -rf /System/Volumes/Data/private/var/db/dyld/*
                                  # sudo rm -rf /System/Library/Fonts/*
                                  # sudo rm -rf /System/Library/PreferencePanes
                                  # sudo rm -rf /System/Library/AssetsV2/*
                                  sudo rm -rf /Applications/Safari.app
                                  sudo rm -rf ~/project/src/build/linux
                                  sudo rm -rf ~/project/src/third_party/catapult/tracing/test_data
                                  sudo rm -rf ~/project/src/third_party/angle/third_party/VK-GL-CTS
                                  # lipo off some huge binaries arm64 versions to save space
                                  strip_arm_deep $(xcode-select -p)/../SharedFrameworks
                                  # strip_arm_deep /System/Volumes/Data/Library/Developer/CommandLineTools/usr
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-generate-deps-hash
                      identifier: stepgeneratedepshash
                      spec:
                        shell: Sh
                        command: node src/electron/script/generate-deps-hash.js && cat src/electron/.depshash-target
                      when:
                        stageStatus: All
                      failureStrategies: []
              - parallel:
                  - step:
                      type: Run
                      name: step-touch-sync-done
                      identifier: steptouchsyncdone
                      spec:
                        shell: Sh
                        command: touch src/electron/.circle-sync-done
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-gclient-sync
                      identifier: stepgclientsync
                      spec:
                        shell: Sh
                        command: |2-
                                # If we did not restore a complete sync then we need to sync for realz
                                if [ ! -s "src/electron/.circle-sync-done" ]; then
                                  gclient config \
                                    --name "src/electron" \
                                    --unmanaged \
                                    $GCLIENT_EXTRA_ARGS \
                                    "$CIRCLE_REPOSITORY_URL"
                                  ELECTRON_USE_THREE_WAY_MERGE_FOR_PATCHES=1 gclient sync --with_branch_heads --with_tags
                                  if [ "$IS_RELEASE" != "true" ]; then
                                    # Re-export all the patches to check if there were changes.
                                    python src/electron/script/export_all_patches.py src/electron/patches/config.json
                                    cd src/electron
                                    git update-index --refresh || true
                                    if ! git diff-index --quiet HEAD --; then
                                      # There are changes to the patches. Make a git commit with the updated patches
                                      git add patches
                                      GIT_COMMITTER_NAME="PatchUp" GIT_COMMITTER_EMAIL="73610968+patchup[bot]@users.noreply.github.com" git commit -m "chore: update patches" --author="PatchUp <73610968+patchup[bot]@users.noreply.github.com>"
                                      # Export it
                                      mkdir -p ../../patches
                                      git format-patch -1 --stdout --keep-subject --no-stat --full-index > ../../patches/update-patches.patch
                                      if (node ./script/push-patch.js 2> /dev/null > /dev/null); then
                                        echo
                                        echo "======================================================================"
                                        echo "Changes to the patches when applying, we have auto-pushed the diff to the current branch"
                                        echo "A new CI job will kick off shortly"
                                        echo "======================================================================"
                                        exit 1
                                      else
                                        echo
                                        echo "======================================================================"
                                        echo "There were changes to the patches when applying."
                                        echo "Check the CI artifacts for a patch you can apply to fix it."
                                        echo "======================================================================"
                                        exit 1
                                      fi
                                    fi
                                  fi
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
              - step:
                  type: Run
                  name: Wipe Electron
                  identifier: Wipe_Electron
                  spec:
                    shell: Sh
                    command: rm -rf src/electron
                  when:
                    stageStatus: All
                  failureStrategies: []
              - parallel:
                  - step:
                      type: Run
                      name: step-generate-deps-hash-cleanly
                      identifier: stepgeneratedepshashcleanly
                      spec:
                        shell: Sh
                        command: (cd src/electron && git checkout .) && node src/electron/script/generate-deps-hash.js && cat src/electron/.depshash-target
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-run-electron-only-hooks
                      identifier: steprunelectrononlyhooks
                      spec:
                        shell: Sh
                        command: gclient runhooks --spec="solutions=[{'name':'src/electron','url':None,'deps_file':'DEPS','custom_vars':{'process_deps':False},'managed':False}]"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-mark-sync-done
                      identifier: stepmarksyncdone
                      spec:
                        shell: Sh
                        command: echo DONE > src/electron/.circle-sync-done
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-minimize-workspace-size-from-checkout
                      identifier: stepminimizeworkspacesizefromcheckout
                      spec:
                        shell: Sh
                        command: |-
                          rm -rf src/third_party/electron_node/deps/openssl
                          rm -rf src/third_party/electron_node/deps/v8
                      when:
                        stageStatus: All
                      failureStrategies: []
              - parallel:
                  - step:
                      type: Run
                      name: step-delete-git-directories
                      identifier: stepdeletegitdirectories
                      spec:
                        shell: Sh
                        command: |-
                          if [ "`uname`" == "Darwin" ]; then
                          cd src
                          ( find . -type d -name ".git" -not -path "./third_party/angle/*" -not -path "./third_party/dawn/*" -not -path "./electron/*" ) | xargs rm -rf
                          fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Move src folder to the cross-OS portal
                      identifier: Move_src_folder_to_the_crossOS_portal
                      spec:
                        shell: Sh
                        command: |-
                          sudo mkdir -p /var/portal
                          sudo chown -R $(id -u):$(id -g) /var/portal
                          mv ./src /var/portal
                      when:
                        stageStatus: All
                      failureStrategies: []
    - parallel:
        - stage:
            name: electron-tests
            identifier: Electron_Tests
            type: CI
            spec:
              cloneCodebase: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: SaveCacheGCS
                      name: save-cache
                      identifier: savecache
                      spec:
                        connectorRef: gcpdhruba
                        bucket: test-electron
                        key: v5-brew-cache-{{ arch }}
                        sourcePaths:
                          - /usr/local/Cellar/gnu-tar
                          - /usr/local/bin/gtar
                        archiveFormat: Tar
                  - step:
                      type: Run
                      name: restore_build_artifacts
                      identifier: Restore_key_specific_artifacts
                      spec:
                        shell: Sh
                        command: |-
                          mv_if_exist dist.zip src/out/Default
                          mv_if_exist node_headers.tar.gz src/out/Default/gen
                          mv_if_exist symbols.zip src/out/Default
                          mv_if_exist mksnapshot.zip src/out/Default
                          mv_if_exist chromedriver.zip src/out/Default
                          mv_if_exist ffmpeg.zip src/out/ffmpeg
                          mv_if_exist hunspell_dictionaries.zip src/out/Default
                          mv_if_exist cross-arch-snapshots src
                      description: restore_build_artifacts
                  - step:
                      type: Run
                      name: Get depot tools
                      identifier: Get_depot_tools
                      spec:
                        shell: Bash
                        command: |2-
                                git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                                if [ "`uname`" == "Darwin" ]; then
                                  # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                                  sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                                else
                                  sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                                  # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                                  cd depot_tools
                                  patch gclient.py -R \<<'EOF'
                                676,677c676
                                <         packages = dep_value.get('packages', [])
                                <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                                ---
                                >         for package in dep_value.get('packages', []):
                                EOF
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-depot-tools-add-to-path
                      identifier: stepdepottoolsaddtopath
                      spec:
                        shell: Bash
                        command: echo "export PATH="$PATH:$PWD"/depot_tools" >> $BASH_ENV
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-electron-dist-unzip
                      identifier: stepelectrondistunzip
                      spec:
                        shell: Sh
                        command: |2
                                cd src/out/Default
                                # -o  overwrite files WITHOUT prompting
                                # TODO(alexeykuzmin): Remove '-o' when it's no longer needed.
                                # -: allows to extract archive members into  locations  outside
                                #    of the current ``extraction root folder''.
                                #    ASan builds have the llvm-symbolizer binaries listed as
                                #    runtime_deps, with their paths as `../../third_party/...`
                                #    unzip exits with non-zero code on such zip files unless -: is
                                #    passed.
                                unzip -:o dist.zip
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-mksnapshot-unzip
                      identifier: stepmksnapshotunzip
                      spec:
                        shell: Sh
                        command: |-
                          cd src/out/Default
                          unzip -:o mksnapshot.zip
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-chromedriver-unzip
                      identifier: stepchromedriverunzip
                      spec:
                        shell: Sh
                        command: |-
                          cd src/out/Default
                          unzip -:o chromedriver.zip
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-setup-linux-for-headless-testing
                      identifier: stepsetuplinuxforheadlesstesting
                      spec:
                        shell: Sh
                        command: |2
                                if [ "`uname`" != "Darwin" ]; then
                                  sh -e /etc/init.d/xvfb start
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-fix-known-hosts-linux
                      identifier: stepfixknownhostslinux
                      spec:
                        shell: Sh
                        command: |-
                          if [ "`uname`" == "Linux" ]; then
                          ./src/electron/.circleci/fix-known-hosts.sh
                          fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: install-python2-mac
                      identifier: installpython2mac
                      spec:
                        shell: Sh
                        command: |-
                          if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                              if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                              mkdir python-downloads
                              echo 'Downloading Python 2.7.18'
                              curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                              mv python-2.7.18-macosx10.9.pkg python-downloads
                              else
                              echo 'Using Python install from cache'
                              fi
                              sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                          fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-install-signing-cert-on-mac
                      identifier: stepinstallsigningcertonmac
                      spec:
                        shell: Sh
                        command: |2-
                                if  [ "$TARGET_ARCH" != "arm64" ] && [ "`uname`" == "Darwin" ]; then
                                  sudo security authorizationdb write com.apple.trust-settings.admin allow
                                  cd src/electron
                                  ./script/codesign/generate-identity.sh
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Run Electron tests
                      identifier: Electron_tests
                      spec:
                        shell: Sh
                        command: |2-
                                      cd src
                                      if [ "$IS_ASAN" == "1" ]; then
                                        ASAN_SYMBOLIZE="$PWD/tools/valgrind/asan/asan_symbolize.py --executable-path=$PWD/out/Default/electron"
                                        export ASAN_OPTIONS="symbolize=0 handle_abort=1"
                                        export G_SLICE=always-malloc
                                        export NSS_DISABLE_ARENA_FREE_LIST=1
                                        export NSS_DISABLE_UNLOAD=1
                                        export LLVM_SYMBOLIZER_PATH=$PWD/third_party/llvm-build/Release+Asserts/bin/llvm-symbolizer
                                        export MOCHA_TIMEOUT=180000
                                        echo "Piping output to ASAN_SYMBOLIZE ($ASAN_SYMBOLIZE)"
                                        (cd electron && node script/yarn test --runners=main --trace-uncaught --enable-logging --files $(circleci tests glob spec/*-spec.ts | circleci tests split --split-by=timings)) 2>&1 | $ASAN_SYMBOLIZE
                                      else
                                        if [ "$TARGET_ARCH" == "arm" ] || [ "$TARGET_ARCH" == "arm64" ]; then
                                          export ELECTRON_SKIP_NATIVE_MODULE_TESTS=true
                                          (cd electron && node script/yarn test --runners=main --trace-uncaught --enable-logging)
                                        else
                                          if [ "$TARGET_ARCH" == "ia32" ]; then
                                            npm_config_arch=x64 node electron/node_modules/dugite/script/download-git.js
                                          fi
                                          (cd electron && node script/yarn test --runners=main --trace-uncaught --enable-logging --files $(circleci tests glob spec/*-spec.ts | circleci tests split --split-by=timings))
                                        fi
                                      fi
                        envVariables:
                          MOCHA_REPORTER: mocha-multi-reporters
                          ELECTRON_TEST_RESULTS_DIR: junit
                          MOCHA_MULTI_REPORTERS: mocha-junit-reporter, tap
                          ELECTRON_DISABLE_SECURITY_WARNINGS: "1"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Check test results existence
                      identifier: Check_test_results_existence
                      spec:
                        shell: Sh
                        command: |2-
                                      cd src
                                      # Check if test results exist and are not empty.
                                      if [ ! -s "junit/test-results-main.xml" ]; then
                                        exit 1
                                      fi
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - src/junit
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-verify-mksnapshot
                      identifier: stepverifymksnapshot
                      spec:
                        shell: Sh
                        command: |2-
                                if [ "$IS_ASAN" != "1" ]; then
                                  cd src
                                  if [ "$TARGET_ARCH" == "arm" ] || [ "$TARGET_ARCH" == "arm64" ]; then
                                    python electron/script/verify-mksnapshot.py --source-root "$PWD" --build-dir out/Default --snapshot-files-dir $PWD/cross-arch-snapshots
                                  else
                                    python electron/script/verify-mksnapshot.py --source-root "$PWD" --build-dir out/Default
                                  fi
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-verify-chromedriver
                      identifier: stepverifychromedriver
                      spec:
                        shell: Sh
                        command: |2-
                                if [ "$IS_ASAN" != "1" ]; then
                                  cd src
                                  python electron/script/verify-chromedriver.py --source-root "$PWD" --build-dir out/Default
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-maybe-notify-slack-failure
                      identifier: stepmaybenotifyslackfailure
                      spec:
                        shell: Sh
                        command: |2-
                                if [ "$NOTIFY_SLACK" == "true" ]; then
                                  export MESSAGE="Build failed for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build from *$CIRCLE_BRANCH*."
                                  curl -g -H "Content-Type: application/json" -X POST \
                                  -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"#FC5C3C\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
                                fi
                      when:
                        stageStatus: Success
                        condition: <+pipeline.stages.cond.spec.execution.steps.echo.status> == "FAILED"
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-maybe-cleanup-arm64-mac
                      identifier: stepmaybecleanuparm64mac
                      spec:
                        shell: Sh
                        command: |2-
                                if  [ "$TARGET_ARCH" == "arm64" ] &&[ "`uname`" == "Darwin" ]; then
                                  killall Electron || echo "No Electron processes left running"
                                  killall Safari || echo "No Safari processes left running"
                                  rm -rf ~/Library/Application\ Support/Electron*
                                  rm -rf ~/Library/Application\ Support/electron*
                                  security delete-generic-password -l "Chromium Safe Storage" || echo "✓ Keychain does not contain password from tests"
                                  security delete-generic-password -l "Electron Test Main Safe Storage" || echo "✓ Keychain does not contain password from tests"
                                  security delete-generic-password -a "electron-test-safe-storage" || echo "✓ Keychain does not contain password from tests"
                                  security delete-generic-password -l "electron-test-safe-storage Safe Storage" || echo "✓ Keychain does not contain password from tests"
                                elif [ "$TARGET_ARCH" == "arm" ] || [ "$TARGET_ARCH" == "arm64" ]; then
                                  XVFB=/usr/bin/Xvfb
                                  /sbin/start-stop-daemon --stop --exec $XVFB || echo "Xvfb not running"
                                  pkill electron || echo "electron not running"
                                  rm -rf ~/.config/Electron*
                                  rm -rf ~/.config/electron*
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
              sharedPaths:
                - /src/electron
            when:
              pipelineStatus: All
        - stage:
            name: nan-tests
            identifier: nantests
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: step-depot-tools-add-to-path
                      identifier: stepdepottoolsaddtopath
                      spec:
                        shell: Sh
                        command: echo 'export PATH="$PATH:'"$PWD"'/depot_tools"' >> $BASH_ENV
                  - step:
                      type: Run
                      name: step-electron-dist-unzip
                      identifier: stepelectrondistunzip
                      spec:
                        shell: Sh
                        command: |2-
                                cd src/out/Default
                                # -o  overwrite files WITHOUT prompting
                                # TODO(alexeykuzmin): Remove '-o' when it's no longer needed.
                                # -: allows to extract archive members into  locations  outside
                                #    of the current ``extraction root folder''.
                                #    ASan builds have the llvm-symbolizer binaries listed as
                                #    runtime_deps, with their paths as `../../third_party/...`
                                #    unzip exits with non-zero code on such zip files unless -: is
                                #    passed.
                                unzip -:o dist.zip
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-setup-linux-for-headless-testing
                      identifier: stepsetuplinuxforheadlesstesting
                      spec:
                        shell: Sh
                        command: |2-
                                if [ "`uname`" != "Darwin" ]; then
                                  sh -e /etc/init.d/xvfb start
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-fix-known-hosts-linux
                      identifier: stepfixknownhostslinux
                      spec:
                        shell: Sh
                        command: |-
                          if [ "`uname`" == "Linux" ]; then
                          ./src/electron/.circleci/fix-known-hosts.sh
                          fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Run Nan Tests
                      identifier: Run_Nan_Tests
                      spec:
                        shell: Sh
                        command: |2-
                                      cd src
                                      node electron/script/nan-spec-runner.js
                      when:
                        stageStatus: All
                      failureStrategies: []
            when:
              pipelineStatus: All
        - stage:
            name: node-tests
            identifier: nodetests
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: step-depot-tools-add-to-path
                      identifier: stepdepottoolsaddtopath
                      spec:
                        shell: Sh
                        command: echo 'export PATH="$PATH:'"$PWD"'/depot_tools"' >> $BASH_ENV
                  - step:
                      type: Run
                      name: step-electron-dist-unzip
                      identifier: stepelectrondistunzip
                      spec:
                        shell: Sh
                        command: |2-
                                cd src/out/Default
                                # -o  overwrite files WITHOUT prompting
                                # TODO(alexeykuzmin): Remove '-o' when it's no longer needed.
                                # -: allows to extract archive members into  locations  outside
                                #    of the current ``extraction root folder''.
                                #    ASan builds have the llvm-symbolizer binaries listed as
                                #    runtime_deps, with their paths as `../../third_party/...`
                                #    unzip exits with non-zero code on such zip files unless -: is
                                #    passed.
                                unzip -:o dist.zip
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-setup-linux-for-headless-testing
                      identifier: stepsetuplinuxforheadlesstesting
                      spec:
                        shell: Sh
                        command: |2-
                                if [ "`uname`" != "Darwin" ]; then
                                  sh -e /etc/init.d/xvfb start
                                fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: step-fix-known-hosts-linux
                      identifier: stepfixknownhostslinux
                      spec:
                        shell: Sh
                        command: |-
                          if [ "`uname`" == "Linux" ]; then
                          ./src/electron/.circleci/fix-known-hosts.sh
                          fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Run Node Tests
                      identifier: Run_Nan_Tests
                      spec:
                        shell: Sh
                        command: |2-
                                      cd src
                                      node electron/script/node-spec-runner.js --default --jUnitDir=junit
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - src/junit
                      when:
                        stageStatus: All
                      failureStrategies: []
            when:
              pipelineStatus: All
    - stage:
        name: Builds
        identifier: Builds
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - parallel:
                  - step:
                      type: Run
                      name: Send slack notifications on failure
                      identifier: Pack_config
                      spec:
                        shell: Sh
                        command: |2-
                                if [ "$NOTIFY_SLACK" == "true" ]; then
                                  export MESSAGE="Build failed for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build from *$CIRCLE_BRANCH*."
                                  curl -g -H "Content-Type: application/json" -X POST \
                                  -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"#FC5C3C\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
                                fi
                  - step:
                      type: Run
                      name: Send slack notifications on success
                      identifier: Send_slack_notifications_on_success
                      spec:
                        shell: Sh
                        command: |2-
                                if [ "$NOTIFY_SLACK" == "true" ]; then
                                  export MESSAGE="Build succeeded for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build from *$CIRCLE_BRANCH*."
                                  curl -g -H "Content-Type: application/json" -X POST \
                                  -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"good\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
                                fi
              - step:
                  type: Run
                  name: Cleanup after testing
                  identifier: Cleanup_after_testing
                  spec:
                    shell: Sh
                    command: |2
                            if  [ "$TARGET_ARCH" == "arm64" ] &&[ "`uname`" == "Darwin" ]; then
                              killall Electron || echo "No Electron processes left running"
                              killall Safari || echo "No Safari processes left running"
                              rm -rf ~/Library/Application\ Support/Electron*
                              rm -rf ~/Library/Application\ Support/electron*
                              security delete-generic-password -l "Chromium Safe Storage" || echo "✓ Keychain does not contain password from tests"
                              security delete-generic-password -l "Electron Test Main Safe Storage" || echo "✓ Keychain does not contain password from tests"
                              security delete-generic-password -a "electron-test-safe-storage" || echo "✓ Keychain does not contain password from tests"
                              security delete-generic-password -l "electron-test-safe-storage Safe Storage" || echo "✓ Keychain does not contain password from tests"
                            elif [ "$TARGET_ARCH" == "arm" ] || [ "$TARGET_ARCH" == "arm64" ]; then
                              XVFB=/usr/bin/Xvfb
                              /sbin/start-stop-daemon --stop --exec $XVFB || echo "Xvfb not running"
                              pkill electron || echo "electron not running"
                              rm -rf ~/.config/Electron*
                              rm -rf ~/.config/electron*
                            fi
              - step:
                  type: Run
                  name: Get depot tools
                  identifier: Get_depot_tools
                  spec:
                    shell: Sh
                    command: |
                      git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                      if [ "`uname`" == "Darwin" ]; then
                      # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                      sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                      else
                      sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                      # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                      cd depot_tools
                      fi
              - step:
                  type: Run
                  name: Gclient sync
                  identifier: Add_depot_tools_to_PATH
                  spec:
                    shell: Sh
                    command: |2-
                            # If we did not restore a complete sync then we need to sync for realz
                            if [ ! -s "src/electron/.circle-sync-done" ]; then
                              gclient config \
                                --name "src/electron" \
                                --unmanaged \
                                $GCLIENT_EXTRA_ARGS \
                                "$CIRCLE_REPOSITORY_URL"
                              ELECTRON_USE_THREE_WAY_MERGE_FOR_PATCHES=1 gclient sync --with_branch_heads --with_tags
                              if [ "$IS_RELEASE" != "true" ]; then
                                # Re-export all the patches to check if there were changes.
                                python src/electron/script/export_all_patches.py src/electron/patches/config.json
                                cd src/electron
                                git update-index --refresh || true
                                if ! git diff-index --quiet HEAD --; then
                                  # There are changes to the patches. Make a git commit with the updated patches
                                  git add patches
                                  GIT_COMMITTER_NAME="PatchUp" GIT_COMMITTER_EMAIL="73610968+patchup[bot]@users.noreply.github.com" git commit -m "chore: update patches" --author="PatchUp <73610968+patchup[bot]@users.noreply.github.com>"
                                  # Export it
                                  mkdir -p ../../patches
                                  git format-patch -1 --stdout --keep-subject --no-stat --full-index > ../../patches/update-patches.patch
                                  if (node ./script/push-patch.js 2> /dev/null > /dev/null); then
                                    echo
                                    echo "======================================================================"
                                    echo "Changes to the patches when applying, we have auto-pushed the diff to the current branch"
                                    echo "A new CI job will kick off shortly"
                                    echo "======================================================================"
                                    exit 1
                                  else
                                    echo
                                    echo "======================================================================"
                                    echo "There were changes to the patches when applying."
                                    echo "Check the CI artifacts for a patch you can apply to fix it."
                                    echo "======================================================================"
                                    exit 1
                                  fi
                                fi
                              fi
                            fi
                  when:
                    stageStatus: All
                  failureStrategies: []
        when:
          pipelineStatus: All
  variables:
    - name: MOCHA_REPORTER
      type: String
      description: ""
      value: mocha-multi-reporters
    - name: ELECTRON_TEST_RESULTS_DIR
      type: String
      description: ""
      value: junit
    - name: MOCHA_MULTI_REPORTERS
      type: String
      description: ""
      value: mocha-junit-reporter, tap
    - name: ELECTRON_DISABLE_SECURITY_WARNINGS
      type: String
      description: ""
      value: "1"
  allowStageExecutions: true
