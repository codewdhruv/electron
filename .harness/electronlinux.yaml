pipeline:
  name: electron-linux
  identifier: electronlinux
  projectIdentifier: NgLabs
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: gitconnectordhruba
        repoName: electron
        build: <+input>
  stages:
    - stage:
        name: linux-make-src-cache
        identifier: linuxmakesrccache
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - stepGroup:
                  name: electron-build
                  identifier: electronbuild
                  steps:
                    - step:
                        type: Run
                        name: Install gnu-tar on macos
                        identifier: Install_gnutar_on_macos
                        spec:
                          connectorRef: harnessdocker
                          image: curlimages/curl:7.87.0
                          shell: Sh
                          command: |
                            #!/bin/bash -eo pipefail
                            if [ "`uname`" == "Darwin" ]; then
                              if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
                                brew update
                                brew install gnu-tar
                              fi
                              ln -fs /usr/local/bin/gtar /usr/local/bin/tar
                            fi
                          envVariables:
                            IS_ELECTRON_RUNNER: "1"
                            ELECTRON_OUT_DIR: Default
                            NUMBER_OF_NINJA_PROCESSES: "34"
                            GCLIENT_EXTRA_ARGS: "--custom-var=checkout_arm=True --custom-var=checkout_arm64=True"
                    - step:
                        type: Run
                        name: Install python2 on mac
                        identifier: Install_python2_on_mac
                        spec:
                          connectorRef: harnessdocker
                          image: curlimages/curl:7.87.0
                          shell: Sh
                          command: |
                            #!/bin/bash -eo pipefail
                            mkdir python-downloads
                            echo 'Downloading Python 2.7.18'
                            curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                            mv python-2.7.18-macosx10.9.pkg python-downloads

                            sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /
                          envVariables:
                            IS_ELECTRON_RUNNER: "1"
                            ELECTRON_OUT_DIR: Default
                            NUMBER_OF_NINJA_PROCESSES: "34"
                            GCLIENT_EXTRA_ARGS: "--custom-var=checkout_arm=True --custom-var=checkout_arm64=True"
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: SaveCacheGCS
                        name: Persisting python cache
                        identifier: Persisting_python_cache
                        spec:
                          connectorRef: gcpdhruba
                          bucket: test-electron
                          key: v2.7.18-python-cache-{{ arch }}
                          sourcePaths:
                            - python-downloads
                          archiveFormat: Tar
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: SaveCacheGCS
                        name: Persisting brew cache
                        identifier: Persisting_brew_cache
                        spec:
                          connectorRef: gcpdhruba
                          bucket: test-electron
                          key: v5-brew-cache-{{ arch }}
                          sourcePaths:
                            - /usr/local/Cellar/gnu-tar
                            - /usr/local/bin/gtar
                          archiveFormat: Tar
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: test
                        identifier: test
                        spec:
                          shell: Sh
                          command: |-
                            #!/bin/bash -eo pipefail
                            if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                              if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                                mkdir python-downloads
                                echo 'Downloading Python 2.7.18'
                                curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                                mv python-2.7.18-macosx10.9.pkg python-downloads
                              else
                                echo 'Using Python install from cache'
                              fi
                              sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                            fi
                    - step:
                        type: Run
                        name: Get depot tools
                        identifier: Get_depot_tools
                        spec:
                          shell: Bash
                          command: |-
                            #!/bin/bash -eo pipefail
                            git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                            if [ "`uname`" == "Darwin" ]; then
                              # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                              sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                            else
                              sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                              # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                              cd depot_tools
                              patch gclient.py -R <<'EOF'
                            676,677c676
                            <         packages = dep_value.get('packages', [])
                            <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                            ---
                            >         for package in dep_value.get('packages', []):
                            EOF
                            fi
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Add depot tools to path
                        identifier: Add_depot_tools_to_path
                        spec:
                          shell: Bash
                          command: |-
                            #!/bin/bash -eo pipefail
                            echo 'export PATH="$PATH:'"$PWD"'/depot_tools"'
                            export PATH="$PATH:/harness/depot_tools"
                            echo $BASH_ENV
                            export BASH_ENV=$PATH
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Freeup space on MacOS
                        identifier: Freeup_space_on_MacOS
                        spec:
                          shell: Bash
                          command: |-
                            #!/bin/bash -eo pipefail
                            if [ "`uname`" == "Darwin" ]; then
                              sudo mkdir -p $TMPDIR/del-target

                              tmpify() {
                                if [ -d "$1" ]; then
                                  sudo mv "$1" $TMPDIR/del-target/$(echo $1|shasum -a 256|head -n1|cut -d " " -f1)
                                fi
                              }

                              strip_arm_deep() {
                                opwd=$(pwd)
                                cd $1
                                f=$(find . -perm +111 -type f)
                                for fp in $f
                                do
                                  if [[ $(file "$fp") == *"universal binary"* ]]; then
                                    if [[ $(file "$fp") == *"arm64e)"* ]]; then
                                      sudo lipo -remove arm64e "$fp" -o "$fp" || true
                                    fi
                                    if [[ $(file "$fp") == *"arm64)"* ]]; then
                                      sudo lipo -remove arm64 "$fp" -o "$fp" || true
                                    fi
                                  fi
                                done

                                cd $opwd
                              }

                              tmpify /Library/Developer/CoreSimulator
                              tmpify ~/Library/Developer/CoreSimulator
                              tmpify $(xcode-select -p)/Platforms/AppleTVOS.platform
                              tmpify $(xcode-select -p)/Platforms/iPhoneOS.platform
                              tmpify $(xcode-select -p)/Platforms/WatchOS.platform
                              tmpify $(xcode-select -p)/Platforms/WatchSimulator.platform
                              tmpify $(xcode-select -p)/Platforms/AppleTVSimulator.platform
                              tmpify $(xcode-select -p)/Platforms/iPhoneSimulator.platform
                              tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/metal/ios
                              tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift
                              tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0
                              tmpify ~/.rubies
                              tmpify ~/Library/Caches/Homebrew
                              tmpify /usr/local/Homebrew
                              sudo rm -rf $TMPDIR/del-target

                              # sudo rm -rf "/System/Library/Desktop Pictures"
                              # sudo rm -rf /System/Library/Templates/Data
                              # sudo rm -rf /System/Library/Speech/Voices
                              # sudo rm -rf "/System/Library/Screen Savers"
                              # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs
                              # sudo rm -rf "/System/Volumes/Data/Library/Application Support/Apple/Photos/Print Products"
                              # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/
                              # sudo rm -rf /System/Volumes/Data/Library/Java
                              # sudo rm -rf /System/Volumes/Data/Library/Ruby
                              # sudo rm -rf /System/Volumes/Data/Library/Printers
                              # sudo rm -rf /System/iOSSupport
                              # sudo rm -rf /System/Applications/*.app
                              # sudo rm -rf /System/Applications/Utilities/*.app
                              # sudo rm -rf /System/Library/LinguisticData
                              # sudo rm -rf /System/Volumes/Data/private/var/db/dyld/*
                              # sudo rm -rf /System/Library/Fonts/*
                              # sudo rm -rf /System/Library/PreferencePanes
                              # sudo rm -rf /System/Library/AssetsV2/*
                              sudo rm -rf /Applications/Safari.app
                              sudo rm -rf ~/project/src/build/linux
                              sudo rm -rf ~/project/src/third_party/catapult/tracing/test_data
                              sudo rm -rf ~/project/src/third_party/angle/third_party/VK-GL-CTS

                              # lipo off some huge binaries arm64 versions to save space
                              strip_arm_deep $(xcode-select -p)/../SharedFrameworks
                              # strip_arm_deep /System/Volumes/Data/Library/Developer/CommandLineTools/usr
                            fi
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Generate deps hash
                        identifier: Generate_deps_hash
                        spec:
                          shell: Bash
                          command: node script/generate-deps-hash.js && cat .depshash-target
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Touch sync done
                        identifier: Touch_sync_done
                        spec:
                          shell: Bash
                          command: |
                            touch .circle-sync-done
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Prepare for cross OS sync restore
                        identifier: Prepare_for_cross_OS_sync_restore
                        spec:
                          shell: Bash
                          command: |-
                            sudo mkdir -p /var/portal
                            sudo chown -R $(id -u):$(id -g) /var/portal
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: RestoreCacheGCS
                        name: Restoring src cache marker
                        identifier: Restoring_src_cache_marker
                        spec:
                          connectorRef: gcpdhruba
                          bucket: test-electron
                          key: v16-src-cache-marker-{{ checksum "src/electron/.depshash" }}
                          archiveFormat: Tar
                        when:
                          stageStatus: All
                        failureStrategies: []
                    - step:
                        type: Run
                        name: Halt the job early if the src cache exists
                        identifier: Halt_the_job_early_if_the_src_cache_exists
                        spec:
                          shell: Bash
                          command: |2-
                                              if [ -f ".src-cache-marker" ]; then
                                                circleci-agent step halt
                                              fi
                        when:
                          stageStatus: All
                        failureStrategies: []
                  when:
                    stageStatus: All
                  failureStrategies: []
                  spec: {}
          sharedPaths:
            - /usr/local/Cellar/gnu-tar/
            - /usr/local/bin/gtar/
        variables:
          - name: GCLIENT_EXTRA_ARGS
            type: String
            description: ""
            value: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
          - name: NUMBER_OF_NINJA_PROCESSES
            type: String
            description: ""
            value: "34"
          - name: ELECTRON_OUT_DIR
            type: String
            description: ""
            value: Default
    - stage:
        name: linux-x64-testing
        identifier: linuxx64testing
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Install gnu-tar on macos
                  identifier: Install_gnutar_on_macos
                  spec:
                    shell: Bash
                    command: |-
                      #!/bin/bash -eo pipefail
                      if [ "`uname`" == "Darwin" ]; then
                        if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
                          brew update
                          brew install gnu-tar
                        fi
                        ln -fs /usr/local/bin/gtar /usr/local/bin/tar
                      fi
              - step:
                  type: Run
                  name: Install python2 on mac
                  identifier: Install_python2_on_mac
                  spec:
                    shell: Bash
                    command: |
                      #!/bin/bash -eo pipefail
                      if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                        if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                          mkdir python-downloads
                          echo 'Downloading Python 2.7.18'
                          curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                          mv python-2.7.18-macosx10.9.pkg python-downloads
                        else
                          echo 'Using Python install from cache'
                        fi
                        sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                      fi
              - step:
                  type: SaveCacheGCS
                  name: Persisting python cache
                  identifier: Persisting_python_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v2.7.18-python-cache-{{ arch }}
                    sourcePaths:
                      - python-downloads
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: SaveCacheGCS
                  name: Persisting brew cache
                  identifier: Persisting_brew_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v5-brew-cache-{{ arch }}
                    sourcePaths:
                      - /usr/local/Cellar/gnu-tar
                      - /usr/local/bin/gtar
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Setup Goma
                  identifier: Setup_Goma
                  spec:
                    shell: Sh
                    command: |+
                      #!/bin/sh

                      echo 'export NUMBER_OF_NINJA_PROCESSES=300' 
                      export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                      echo $BASH_ENV
                      export BASH_ENV=$PATH
                      if [ "`uname`" = "Darwin" ]; then
                        echo 'ulimit -n 10000'
                        echo 'sudo launchctl limit maxfiles 65536 200000' >> $BASH_ENV
                      fi

                      if [ ! -z "$RAW_GOMA_AUTH" ]; then
                        echo $RAW_GOMA_AUTH > ~/.goma_oauth2_config
                      fi

                      git clone https://github.com/electron/build-tools.git
                      cd build-tools
                      npm install
                      mkdir third_party
                      node -e "require('./src/utils/goma.js').downloadAndPrepare({ gomaOneForAll: true })"
                      export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                      third_party/goma/goma_ctl.py ensure_start

                      if [ ! -z "$RAW_GOMA_AUTH" ] && [ "`third_party/goma/goma_auth.py info`" != "Login as Fermi Planck" ]; then
                        echo "WARNING!!!!!! Goma authentication is incorrect; please update Goma auth token."
                        exit 1
                      fi

                      echo 'export GN_GOMA_FILE='`node -e "console.log(require('./src/utils/goma.js').gnFilePath)"` 
                      export GN_GOMA_FILE=/harness/build-tools/third_party/goma.gn
                      echo $BASH_ENV
                      export BASH_ENV=$GN_GOMA_FILE

                      echo 'export LOCAL_GOMA_DIR='`node -e "console.log(require('./src/utils/goma.js').dir)"` 
                      export LOCAL_GOMA_DIR=/harness/build-tools/third_party/goma
                      echo $BASH_ENV
                      export BASH_ENV=$LOCAL_GOMA_DIR

                      echo 'export GOMA_FALLBACK_ON_AUTH_FAILURE=true' 
                      export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                      echo $BASH_ENV
                      export BASH_ENV=$GOMA_FALLBACK_ON_AUTH_FAILURE

                      cd ..
                      touch "${TMPDIR:=/tmp}"/.goma-ready

                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Get depot tools
                  identifier: Run_4
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail
                      git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                      if [ "`uname`" == "Darwin" ]; then
                        # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                        sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                      else
                        sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                        # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                        cd depot_tools
                        patch gclient.py -R <<'EOF'
                      676,677c676
                      <         packages = dep_value.get('packages', [])
                      <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                      ---
                      >         for package in dep_value.get('packages', []):
                      EOF
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Generate deps hash
                  identifier: Generate_deps_hash
                  spec:
                    shell: Sh
                    command: node script/generate-deps-hash.js && cat .depshash-target
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Prepare for cross OS sync restore
                  identifier: Prepare_for_cross_OS_sync_restore
                  spec:
                    shell: Sh
                    command: |-
                      sudo mkdir -p /var/portal
                      sudo chown -R $(id -u):$(id -g) /var/portal
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: RestoreCacheGCS
                  name: Restoring cache from src
                  identifier: Restoring_cache_from_src
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v16-src-cache-{{ checksum "src/electron/.depshash" }}
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Fix the src cache restore point on mac
                  identifier: Fix_the_src_cache_restore_point_on_mac
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail
                      if [ -d "/var/portal/src" ]; then
                        echo Relocating Cache
                        rm -rf src
                        mv /var/portal/src ./
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Ensure src checkout worked
                  identifier: Ensure_src_checkout_worked
                  spec:
                    shell: Sh
                    command: |
                      #!/bin/bash -eo pipefail
                      if [ ! -d "src/third_party/blink" ]; then
                        echo src cache was not restored for some reason, idk what happened here...
                        exit 1
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Wipe electron
                  identifier: Wipe_electron
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail
                      rm -rf src/electron
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Run electron only hooks
                  identifier: Run_electron_only_hooks
                  spec:
                    shell: Sh
                    command: |
                      export PATH=$PATH:/harness/depot_tools
                      export BASH_ENV=$BASH_ENV:/harness/depot_tools

                      gclient runhooks --spec=solutions=[{'name':'','url':None,'deps_file':'DEPS','custom_vars':{'process_deps':False},'managed':False}]
                  when:
                    stageStatus: All
                  failureStrategies: []
        when:
          pipelineStatus: All
  allowStageExecutions: true
