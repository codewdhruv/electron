pipeline:
  name: electron-linux
  identifier: electronlinux
  projectIdentifier: NgLabs
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: gitconnectordhruba
        repoName: electron
        build: <+input>
  stages:
    - stage:
        name: linux-make-src-cache
        identifier: linuxmakesrccache
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Install gnu-tar on macos
                  identifier: Install_gnutar_on_macos
                  spec:
                    connectorRef: harnessdocker
                    image: curlimages/curl:7.87.0
                    shell: Sh
                    command: |
                      #!/bin/bash -eo pipefail
                      if [ "`uname`" == "Darwin" ]; then
                        if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
                          brew update
                          brew install gnu-tar
                        fi
                        ln -fs /usr/local/bin/gtar /usr/local/bin/tar
                      fi
                    envVariables:
                      IS_ELECTRON_RUNNER: "1"
                      ELECTRON_OUT_DIR: Default
                      NUMBER_OF_NINJA_PROCESSES: "34"
                      GCLIENT_EXTRA_ARGS: "--custom-var=checkout_arm=True --custom-var=checkout_arm64=True"
              - step:
                  type: Run
                  name: Install python2 on mac
                  identifier: Run_1
                  spec:
                    shell: Sh
                    command: |-
                      echo "dhruba ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/dhruba
                      sudo mkdir python-downloads
                      echo 'Downloading Python 2.7.18'
                      curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                      mv python-2.7.18-macosx10.9.pkg python-downloads 
                      ls
              - step:
                  type: SaveCacheGCS
                  name: Persisting python cache
                  identifier: Restore_python_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v2.7.18-python-cache-{{ arch }}
                    sourcePaths:
                      - python-downloads
                    archiveFormat: Tar
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
              - step:
                  type: SaveCacheGCS
                  name: Persisting brew cache
                  identifier: Persisting_brew_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v5-brew-cache-{{ arch }}
                    sourcePaths:
                      - /usr/local/Cellar/gnu-tar
                      - /usr/local/bin/gtar
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
              - step:
                  type: Run
                  name: Get depot tools
                  identifier: Get_depot_tools
                  spec:
                    shell: Bash
                    command: |-
                      git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                      cd depot_tools
                      git fetch --depth 1 origin b7d8efd8bee494f4cfacacc19cf50fc4d4be3900
                      git checkout b7d8efd8bee494f4cfacacc19cf50fc4d4be3900
                      touch .disable_auto_update
                      cd ..
                      if [ "`uname`" == "Darwin" ]; then
                        # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                        sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                      else
                        sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                        # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                        cd depot_tools
                        patch gclient.py -R <<'EOF'
                      676,677c676
                      <         packages = dep_value.get('packages', [])
                      <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                      ---
                      >         for package in dep_value.get('packages', []):
                      EOF
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Add depot tools to path
                  identifier: Add_depot_tools_to_path
                  spec:
                    shell: Bash
                    command: |-
                      #!/bin/bash -eo pipefail
                      echo 'export PATH="$PATH:'"$PWD"'/depot_tools"'
                      export PATH="$PATH:/harness/depot_tools"
                      echo $BASH_ENV
                      export BASH_ENV=$PATH
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Freeup space on MacOS
                  identifier: Freeup_space_on_MacOS
                  spec:
                    shell: Bash
                    command: |-
                      #!/bin/bash -eo pipefail
                      if [ "`uname`" == "Darwin" ]; then
                        sudo mkdir -p $TMPDIR/del-target

                        tmpify() {
                          if [ -d "$1" ]; then
                            sudo mv "$1" $TMPDIR/del-target/$(echo $1|shasum -a 256|head -n1|cut -d " " -f1)
                          fi
                        }

                        strip_arm_deep() {
                          opwd=$(pwd)
                          cd $1
                          f=$(find . -perm +111 -type f)
                          for fp in $f
                          do
                            if [[ $(file "$fp") == *"universal binary"* ]]; then
                              if [[ $(file "$fp") == *"arm64e)"* ]]; then
                                sudo lipo -remove arm64e "$fp" -o "$fp" || true
                              fi
                              if [[ $(file "$fp") == *"arm64)"* ]]; then
                                sudo lipo -remove arm64 "$fp" -o "$fp" || true
                              fi
                            fi
                          done

                          cd $opwd
                        }

                        tmpify /Library/Developer/CoreSimulator
                        tmpify ~/Library/Developer/CoreSimulator
                        tmpify $(xcode-select -p)/Platforms/AppleTVOS.platform
                        tmpify $(xcode-select -p)/Platforms/iPhoneOS.platform
                        tmpify $(xcode-select -p)/Platforms/WatchOS.platform
                        tmpify $(xcode-select -p)/Platforms/WatchSimulator.platform
                        tmpify $(xcode-select -p)/Platforms/AppleTVSimulator.platform
                        tmpify $(xcode-select -p)/Platforms/iPhoneSimulator.platform
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/metal/ios
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0
                        tmpify ~/.rubies
                        tmpify ~/Library/Caches/Homebrew
                        tmpify /usr/local/Homebrew
                        sudo rm -rf $TMPDIR/del-target

                        # sudo rm -rf "/System/Library/Desktop Pictures"
                        # sudo rm -rf /System/Library/Templates/Data
                        # sudo rm -rf /System/Library/Speech/Voices
                        # sudo rm -rf "/System/Library/Screen Savers"
                        # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs
                        # sudo rm -rf "/System/Volumes/Data/Library/Application Support/Apple/Photos/Print Products"
                        # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/
                        # sudo rm -rf /System/Volumes/Data/Library/Java
                        # sudo rm -rf /System/Volumes/Data/Library/Ruby
                        # sudo rm -rf /System/Volumes/Data/Library/Printers
                        # sudo rm -rf /System/iOSSupport
                        # sudo rm -rf /System/Applications/*.app
                        # sudo rm -rf /System/Applications/Utilities/*.app
                        # sudo rm -rf /System/Library/LinguisticData
                        # sudo rm -rf /System/Volumes/Data/private/var/db/dyld/*
                        # sudo rm -rf /System/Library/Fonts/*
                        # sudo rm -rf /System/Library/PreferencePanes
                        # sudo rm -rf /System/Library/AssetsV2/*
                        sudo rm -rf /Applications/Safari.app
                        sudo rm -rf ~/project/src/build/linux
                        sudo rm -rf ~/project/src/third_party/catapult/tracing/test_data
                        sudo rm -rf ~/project/src/third_party/angle/third_party/VK-GL-CTS

                        # lipo off some huge binaries arm64 versions to save space
                        strip_arm_deep $(xcode-select -p)/../SharedFrameworks
                        # strip_arm_deep /System/Volumes/Data/Library/Developer/CommandLineTools/usr
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Generate deps hash
                  identifier: Generate_deps_hash
                  spec:
                    shell: Bash
                    command: node script/generate-deps-hash.js && cat .depshash-target
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Touch sync done
                  identifier: Touch_sync_done
                  spec:
                    shell: Bash
                    command: |
                      touch .circle-sync-done
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Prepare for cross OS sync restore
                  identifier: Prepare_for_cross_OS_sync_restore
                  spec:
                    shell: Bash
                    command: |-
                      sudo mkdir -p /var/portal
                      sudo chown -R $(id -u):$(id -g) /var/portal
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: RestoreCacheGCS
                  name: Restoring src cache marker
                  identifier: Restoring_src_cache_marker
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v16-src-cache-marker-{{ checksum "src/electron/.depshash" }}
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Halt the job early if the src cache exists
                  identifier: Halt_the_job_early_if_the_src_cache_exists
                  spec:
                    shell: Bash
                    command: |2-
                                        if [ -f ".src-cache-marker" ]; then
                                          circleci-agent step halt
                                        fi
                  when:
                    stageStatus: All
                  failureStrategies: []
          sharedPaths:
            - /usr/local/Cellar/gnu-tar/
            - /usr/local/bin/gtar/
        variables:
          - name: GCLIENT_EXTRA_ARGS
            type: String
            description: ""
            value: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
          - name: NUMBER_OF_NINJA_PROCESSES
            type: String
            description: ""
            value: "34"
          - name: ELECTRON_OUT_DIR
            type: String
            description: ""
            value: Default
    - parallel:
        - stage:
            name: linux-x64-testing
            identifier: linuxx64testing
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Install gnu-tar on macos
                      identifier: Install_gnutar_on_macos
                      spec:
                        shell: Bash
                        command: |-
                          #!/bin/bash -eo pipefail
                          if [ "`uname`" == "Darwin" ]; then
                            if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
                              brew update
                              brew install gnu-tar
                            fi
                            ln -fs /usr/local/bin/gtar /usr/local/bin/tar
                          fi
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: Success
                        condition: "false"
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Install python2 on mac
                      identifier: Install_python2_on_mac
                      spec:
                        shell: Bash
                        command: |
                          #!/bin/bash -eo pipefail
                          if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                            if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                              mkdir python-downloads
                              echo 'Downloading Python 2.7.18'
                              curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                              mv python-2.7.18-macosx10.9.pkg python-downloads
                            else
                              echo 'Using Python install from cache'
                            fi
                            sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                          fi
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                  - step:
                      type: SaveCacheGCS
                      name: Persisting python cache
                      identifier: Persisting_python_cache
                      spec:
                        connectorRef: gcpdhruba
                        bucket: test-electron
                        key: v2.7.18-python-cache-{{ arch }}
                        sourcePaths:
                          - python-downloads
                        archiveFormat: Tar
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: SaveCacheGCS
                      name: Persisting brew cache
                      identifier: Persisting_brew_cache
                      spec:
                        connectorRef: gcpdhruba
                        bucket: test-electron
                        key: v5-brew-cache-{{ arch }}
                        sourcePaths:
                          - /usr/local/Cellar/gnu-tar
                          - /usr/local/bin/gtar
                        archiveFormat: Tar
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Setup Goma
                      identifier: Setup_Goma
                      spec:
                        shell: Sh
                        command: |
                          #!/bin/sh

                          echo 'export NUMBER_OF_NINJA_PROCESSES=300' 
                          export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                          echo $BASH_ENV
                          export BASH_ENV=$PATH
                          if [ "`uname`" = "Darwin" ]; then
                            echo 'ulimit -n 10000'
                            echo 'sudo launchctl limit maxfiles 65536 200000' >> $BASH_ENV
                          fi

                          if [ ! -z "$RAW_GOMA_AUTH" ]; then
                            echo $RAW_GOMA_AUTH > ~/.goma_oauth2_config
                          fi

                          git clone https://github.com/electron/build-tools.git
                          cd build-tools
                          npm install
                          mkdir third_party
                          node -e "require('./src/utils/goma.js').downloadAndPrepare({ gomaOneForAll: true })"
                          export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                          third_party/goma/goma_ctl.py ensure_start

                          if [ ! -z "$RAW_GOMA_AUTH" ] && [ "`third_party/goma/goma_auth.py info`" != "Login as Fermi Planck" ]; then
                            echo "WARNING!!!!!! Goma authentication is incorrect; please update Goma auth token."
                            exit 1
                          fi

                          echo 'export GN_GOMA_FILE='`node -e "console.log(require('./src/utils/goma.js').gnFilePath)"` 
                          export GN_GOMA_FILE=/harness/build-tools/third_party/goma.gn
                          echo $BASH_ENV
                          export BASH_ENV=$GN_GOMA_FILE

                          echo 'export LOCAL_GOMA_DIR='`node -e "console.log(require('./src/utils/goma.js').dir)"` 
                          export LOCAL_GOMA_DIR=/harness/build-tools/third_party/goma
                          echo $BASH_ENV
                          export BASH_ENV=$LOCAL_GOMA_DIR

                          echo 'export GOMA_FALLBACK_ON_AUTH_FAILURE=true' 
                          export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                          echo $BASH_ENV
                          export BASH_ENV=$GOMA_FALLBACK_ON_AUTH_FAILURE

                          cd ..
                          touch "${TMPDIR:=/tmp}"/.goma-ready
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Get depot tools
                      identifier: Run_4
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                          if [ "`uname`" == "Darwin" ]; then
                            # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                            sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                          else
                            sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                            # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                            cd depot_tools
                            patch gclient.py -R <<'EOF'
                          676,677c676
                          <         packages = dep_value.get('packages', [])
                          <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                          ---
                          >         for package in dep_value.get('packages', []):
                          EOF
                          fi
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Generate deps hash
                      identifier: Generate_deps_hash
                      spec:
                        shell: Sh
                        command: node script/generate-deps-hash.js && cat .depshash-target
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Prepare for cross OS sync restore
                      identifier: Prepare_for_cross_OS_sync_restore
                      spec:
                        shell: Sh
                        command: |-
                          sudo mkdir -p /var/portal
                          sudo chown -R $(id -u):$(id -g) /var/portal
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: RestoreCacheGCS
                      name: Restoring cache from src
                      identifier: Restoring_cache_from_src
                      spec:
                        connectorRef: gcpdhruba
                        bucket: test-electron
                        key: v16-src-cache-{{ checksum ".depshash" }}
                        archiveFormat: Tar
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Fix the src cache restore point on mac
                      identifier: Fix_the_src_cache_restore_point_on_mac
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          if [ -d "/var/portal/src" ]; then
                            echo Relocating Cache
                            rm -rf src
                            mv /var/portal/src ./
                          fi
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Ensure src checkout worked
                      identifier: Ensure_src_checkout_worked
                      spec:
                        shell: Sh
                        command: |
                          #!/bin/bash -eo pipefail
                          if [ ! -d "src/third_party/blink" ]; then
                            echo src cache was not restored for some reason, idk what happened here...
                            exit 1
                          fi
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Wipe electron
                      identifier: Wipe_electron
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          rm -rf src/electron
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Run electron only hooks
                      identifier: Run_electron_only_hooks
                      spec:
                        shell: Sh
                        command: |
                          gclient runhooks --spec="solutions=[{'name':'src/electron','url':None,'deps_file':'DEPS','custom_vars':{'process_deps':False},'managed':False}]"
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Generate DEPS hash
                      identifier: Generate_DEPS_hash
                      spec:
                        shell: Sh
                        command: node script/generate-deps-hash.js && cat .depshash-target
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Add depot tools to path
                      identifier: Add_depot_tools_to_path
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          echo 'export PATH="$PATH:'"$PWD"'/depot_tools"'
                          export PATH="$PATH:/harness/depot_tools"
                          echo $BASH_ENV
                          export BASH_ENV=$PATH
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Setup ENV variables
                      identifier: Setup_ENV_variables
                      spec:
                        shell: Sh
                        command: |
                          echo 'export CHROMIUM_BUILDTOOLS_PATH="'"$PWD"'/src/buildtools"' >> $BASH_ENV
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Wait for GOMA
                      identifier: Wait_for_GOMA
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          until [ -f "${TMPDIR:=/tmp}"/.goma-ready ]
                          do
                              sleep 5
                          done
                          echo "Goma ready"
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Free up space on MacOS
                      identifier: Free_up_space_on_MacOS
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          if [ "`uname`" == "Darwin" ]; then
                            sudo mkdir -p $TMPDIR/del-target

                            tmpify() {
                              if [ -d "$1" ]; then
                                sudo mv "$1" $TMPDIR/del-target/$(echo $1|shasum -a 256|head -n1|cut -d " " -f1)
                              fi
                            }

                            strip_arm_deep() {
                              opwd=$(pwd)
                              cd $1
                              f=$(find . -perm +111 -type f)
                              for fp in $f
                              do
                                if [[ $(file "$fp") == *"universal binary"* ]]; then
                                  if [[ $(file "$fp") == *"arm64e)"* ]]; then
                                    sudo lipo -remove arm64e "$fp" -o "$fp" || true
                                  fi
                                  if [[ $(file "$fp") == *"arm64)"* ]]; then
                                    sudo lipo -remove arm64 "$fp" -o "$fp" || true
                                  fi
                                fi
                              done

                              cd $opwd
                            }

                            tmpify /Library/Developer/CoreSimulator
                            tmpify ~/Library/Developer/CoreSimulator
                            tmpify $(xcode-select -p)/Platforms/AppleTVOS.platform
                            tmpify $(xcode-select -p)/Platforms/iPhoneOS.platform
                            tmpify $(xcode-select -p)/Platforms/WatchOS.platform
                            tmpify $(xcode-select -p)/Platforms/WatchSimulator.platform
                            tmpify $(xcode-select -p)/Platforms/AppleTVSimulator.platform
                            tmpify $(xcode-select -p)/Platforms/iPhoneSimulator.platform
                            tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/metal/ios
                            tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift
                            tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0
                            tmpify ~/.rubies
                            tmpify ~/Library/Caches/Homebrew
                            tmpify /usr/local/Homebrew
                            sudo rm -rf $TMPDIR/del-target

                            # sudo rm -rf "/System/Library/Desktop Pictures"
                            # sudo rm -rf /System/Library/Templates/Data
                            # sudo rm -rf /System/Library/Speech/Voices
                            # sudo rm -rf "/System/Library/Screen Savers"
                            # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs
                            # sudo rm -rf "/System/Volumes/Data/Library/Application Support/Apple/Photos/Print Products"
                            # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/
                            # sudo rm -rf /System/Volumes/Data/Library/Java
                            # sudo rm -rf /System/Volumes/Data/Library/Ruby
                            # sudo rm -rf /System/Volumes/Data/Library/Printers
                            # sudo rm -rf /System/iOSSupport
                            # sudo rm -rf /System/Applications/*.app
                            # sudo rm -rf /System/Applications/Utilities/*.app
                            # sudo rm -rf /System/Library/LinguisticData
                            # sudo rm -rf /System/Volumes/Data/private/var/db/dyld/*
                            # sudo rm -rf /System/Library/Fonts/*
                            # sudo rm -rf /System/Library/PreferencePanes
                            # sudo rm -rf /System/Library/AssetsV2/*
                            sudo rm -rf /Applications/Safari.app
                            sudo rm -rf ~/project/src/build/linux
                            sudo rm -rf ~/project/src/third_party/catapult/tracing/test_data
                            sudo rm -rf ~/project/src/third_party/angle/third_party/VK-GL-CTS

                            # lipo off some huge binaries arm64 versions to save space
                            strip_arm_deep $(xcode-select -p)/../SharedFrameworks
                            # strip_arm_deep /System/Volumes/Data/Library/Developer/CommandLineTools/usr
                          fi
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Fix SYNC
                      identifier: Fix_SYNC
                      spec:
                        shell: Sh
                        command: |
                          #!/bin/bash -eo pipefail
                          SEDOPTION="-i"
                          if [ "`uname`" = "Darwin" ]; then
                            SEDOPTION="-i ''"
                            # Fix Clang Install (wrong binary)
                            rm -rf src/third_party/llvm-build
                            python3 src/tools/clang/scripts/update.py

                            # Fix esbuild (wrong binary)
                            echo 'infra/3pp/tools/esbuild/${platform}' `gclient getdep --deps-file=src/third_party/devtools-frontend/src/DEPS -r 'third_party/esbuild:infra/3pp/tools/esbuild/${platform}'` > esbuild_ensure_file
                            # Remove extra output from calling gclient getdep which always calls update_depot_tools
                            sed -i '' "s/Updating depot_tools... //g" esbuild_ensure_file
                            cipd ensure --root src/third_party/devtools-frontend/src/third_party/esbuild -ensure-file esbuild_ensure_file
                          fi

                          # Make sure we are using the right ninja
                          echo 'infra/3pp/tools/ninja/${platform}' `gclient getdep --deps-file=src/DEPS -r 'src/third_party/ninja:infra/3pp/tools/ninja/${platform}'` > ninja_ensure_file
                          sed $SEDOPTION "s/Updating depot_tools... //g" ninja_ensure_file
                          cipd ensure --root src/third_party/ninja -ensure-file ninja_ensure_file

                          # Explicitly add ninja to the path
                          echo 'export PATH="$PATH:'"$PWD"'/src/third_party/ninja"' >> $BASH_ENV

                          cd src/third_party/angle
                          rm .git/objects/info/alternates
                          git remote set-url origin https://chromium.googlesource.com/angle/angle.git
                          cp .git/config .git/config.backup
                          git remote remove origin
                          mv .git/config.backup .git/config
                          git fetch
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Delete all git directories for mac deps
                      identifier: Delete_all_git_directories_for_mac_deps
                      spec:
                        shell: Sh
                        command: |
                          #!/bin/bash -eo pipefail
                          if [ "`uname`" == "Darwin" ]; then
                            cd src
                            ( find . -type d -name ".git" -not -path "./third_party/angle/*" -not -path "./third_party/dawn/*" -not -path "./electron/*" ) | xargs rm -rf
                          fi
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Default GN gen
                      identifier: Default_GN_gen
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          cd src
                          gn gen out/Default --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: electron build
                      identifier: electron_build
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          cd src

                          # Lets generate a snapshot and mksnapshot and then delete all the x-compiled generated files to save space
                          if [ "$USE_PREBUILT_V8_CONTEXT_SNAPSHOT" == "1" ]; then
                            ninja -C out/Default electron:electron_mksnapshot_zip -j $NUMBER_OF_NINJA_PROCESSES
                            ninja -C out/Default tools/v8_context_snapshot -j $NUMBER_OF_NINJA_PROCESSES
                            gn desc out/Default v8:run_mksnapshot_default args > out/Default/mksnapshot_args
                            # Remove unused args from mksnapshot_args
                            SEDOPTION="-i"
                            if [ "`uname`" == "Darwin" ]; then
                              SEDOPTION="-i ''"
                            fi
                            sed $SEDOPTION '/.*builtins-pgo/d' out/Default/mksnapshot_args
                            sed $SEDOPTION '/--turbo-profiling-input/d' out/Default/mksnapshot_args
                            (cd out/Default; zip mksnapshot.zip mksnapshot_args clang_x64_v8_arm64/gen/v8/embedded.S)
                            if [ "false" == "true" ]; then
                              rm -rf out/Default/clang_x64_v8_arm64/gen
                              rm -rf out/Default/clang_x64_v8_arm64/obj
                              rm -rf out/Default/clang_x64_v8_arm64/thinlto-cache
                              rm -rf out/Default/clang_x64/obj
                              # Regenerate because we just deleted some ninja files
                              gn gen out/Default --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
                            fi
                            # For x-compiles this will be built to the wrong arch after the context snapshot build
                            # so we wipe it before re-linking it below
                            rm -rf out/Default/libffmpeg.dylib
                          fi
                          NINJA_SUMMARIZE_BUILD=1 autoninja -C out/Default electron -j $NUMBER_OF_NINJA_PROCESSES
                          cp out/Default/.ninja_log out/electron_ninja_log
                          node electron/script/check-symlinks.js
                        envVariables:
                          ELECTRON_OUT_DIR: Default
                          GN_CONFIG: //electron/build/args/testing.gn
                          CHECK_DIST_MANIFEST: "'1'"
                          NINJA_STATUS: "\"[%r processes, %f/%t @ %o/s : %es] \""
                          GCLIENT_EXTRA_ARGS: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
                      when:
                        stageStatus: All
                      failureStrategies: []
            when:
              pipelineStatus: All
        - stage:
            name: linux-x64-testing-asan
            identifier: linuxx64testingasan
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Install gnu-tar on macos
                      identifier: Install_gnutar_on_macos
                      spec:
                        shell: Bash
                        command: |-
                          #!/bin/bash -eo pipefail
                          if [ "`uname`" == "Darwin" ]; then
                            if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
                              brew update
                              brew install gnu-tar
                            fi
                            ln -fs /usr/local/bin/gtar /usr/local/bin/tar
                          fi
                  - step:
                      type: Run
                      name: Install python2 on mac
                      identifier: Install_python2_on_mac
                      spec:
                        shell: Bash
                        command: |
                          #!/bin/bash -eo pipefail
                          if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                            if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                              mkdir python-downloads
                              echo 'Downloading Python 2.7.18'
                              curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                              mv python-2.7.18-macosx10.9.pkg python-downloads
                            else
                              echo 'Using Python install from cache'
                            fi
                            sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                          fi
                  - step:
                      type: SaveCacheGCS
                      name: Persisting python cache
                      identifier: Persisting_python_cache
                      spec:
                        connectorRef: gcpdhruba
                        bucket: test-electron
                        key: v2.7.18-python-cache-{{ arch }}
                        sourcePaths:
                          - python-downloads
                        archiveFormat: Tar
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: SaveCacheGCS
                      name: Persisting brew cache
                      identifier: Persisting_brew_cache
                      spec:
                        connectorRef: gcpdhruba
                        bucket: test-electron
                        key: v5-brew-cache-{{ arch }}
                        sourcePaths:
                          - /usr/local/Cellar/gnu-tar
                          - /usr/local/bin/gtar
                        archiveFormat: Tar
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Setup Goma
                      identifier: Setup_Goma
                      spec:
                        shell: Sh
                        command: |+
                          #!/bin/sh

                          echo 'export NUMBER_OF_NINJA_PROCESSES=300' 
                          export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                          echo $BASH_ENV
                          export BASH_ENV=$PATH
                          if [ "`uname`" = "Darwin" ]; then
                            echo 'ulimit -n 10000'
                            echo 'sudo launchctl limit maxfiles 65536 200000' >> $BASH_ENV
                          fi

                          if [ ! -z "$RAW_GOMA_AUTH" ]; then
                            echo $RAW_GOMA_AUTH > ~/.goma_oauth2_config
                          fi

                          git clone https://github.com/electron/build-tools.git
                          cd build-tools
                          npm install
                          mkdir third_party
                          node -e "require('./src/utils/goma.js').downloadAndPrepare({ gomaOneForAll: true })"
                          export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                          third_party/goma/goma_ctl.py ensure_start

                          if [ ! -z "$RAW_GOMA_AUTH" ] && [ "`third_party/goma/goma_auth.py info`" != "Login as Fermi Planck" ]; then
                            echo "WARNING!!!!!! Goma authentication is incorrect; please update Goma auth token."
                            exit 1
                          fi

                          echo 'export GN_GOMA_FILE='`node -e "console.log(require('./src/utils/goma.js').gnFilePath)"` 
                          export GN_GOMA_FILE=/harness/build-tools/third_party/goma.gn
                          echo $BASH_ENV
                          export BASH_ENV=$GN_GOMA_FILE

                          echo 'export LOCAL_GOMA_DIR='`node -e "console.log(require('./src/utils/goma.js').dir)"` 
                          export LOCAL_GOMA_DIR=/harness/build-tools/third_party/goma
                          echo $BASH_ENV
                          export BASH_ENV=$LOCAL_GOMA_DIR

                          echo 'export GOMA_FALLBACK_ON_AUTH_FAILURE=true' 
                          export GOMA_FALLBACK_ON_AUTH_FAILURE=true
                          echo $BASH_ENV
                          export BASH_ENV=$GOMA_FALLBACK_ON_AUTH_FAILURE

                          cd ..
                          touch "${TMPDIR:=/tmp}"/.goma-ready

                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Get depot tools
                      identifier: Run_4
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                          if [ "`uname`" == "Darwin" ]; then
                            # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                            sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                          else
                            sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                            # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                            cd depot_tools
                            patch gclient.py -R <<'EOF'
                          676,677c676
                          <         packages = dep_value.get('packages', [])
                          <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                          ---
                          >         for package in dep_value.get('packages', []):
                          EOF
                          fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Generate deps hash
                      identifier: Generate_deps_hash
                      spec:
                        shell: Sh
                        command: node script/generate-deps-hash.js && cat .depshash-target
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Prepare for cross OS sync restore
                      identifier: Prepare_for_cross_OS_sync_restore
                      spec:
                        shell: Sh
                        command: |-
                          sudo mkdir -p /var/portal
                          sudo chown -R $(id -u):$(id -g) /var/portal
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: RestoreCacheGCS
                      name: Restoring cache from src
                      identifier: Restoring_cache_from_src
                      spec:
                        connectorRef: gcpdhruba
                        bucket: test-electron
                        key: v16-src-cache-{{ checksum "src/electron/.depshash" }}
                        archiveFormat: Tar
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Fix the src cache restore point on mac
                      identifier: Fix_the_src_cache_restore_point_on_mac
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          if [ -d "/var/portal/src" ]; then
                            echo Relocating Cache
                            rm -rf src
                            mv /var/portal/src ./
                          fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Ensure src checkout worked
                      identifier: Ensure_src_checkout_worked
                      spec:
                        shell: Sh
                        command: |
                          #!/bin/bash -eo pipefail
                          if [ ! -d "src/third_party/blink" ]; then
                            echo src cache was not restored for some reason, idk what happened here...
                            exit 1
                          fi
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Wipe electron
                      identifier: Wipe_electron
                      spec:
                        shell: Sh
                        command: |-
                          #!/bin/bash -eo pipefail
                          rm -rf src/electron
                      when:
                        stageStatus: All
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Run electron only hooks
                      identifier: Run_electron_only_hooks
                      spec:
                        shell: Sh
                        command: |
                          export PATH=$PATH:/harness/depot_tools
                          export BASH_ENV=$BASH_ENV:/harness/depot_tools

                          gclient runhooks --spec=solutions=[{'name':'','url':None,'deps_file':'DEPS','custom_vars':{'process_deps':False},'managed':False}]
                      when:
                        stageStatus: All
                      failureStrategies: []
            when:
              pipelineStatus: All
    - stage:
        name: testing
        identifier: testing
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Run_1
                  identifier: Run_1
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail
                      if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                        if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                          mkdir python-downloads
                          echo 'Downloading Python 2.7.18'
                          curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                          mv python-2.7.18-macosx10.9.pkg python-downloads
                        else
                          echo 'Using Python install from cache'
                        fi
                        sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                      fi
              - step:
                  type: SaveCacheGCS
                  name: Persisting python cache
                  identifier: Restore_python_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v2.7.18-python-cache-{{ arch }}
                    sourcePaths:
                      - python-downloads
                    archiveFormat: Tar
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
              - step:
                  type: Run
                  name: deps
                  identifier: deps
                  spec:
                    shell: Sh
                    command: |
                      git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                      ls
                      sed -i '/ninjalog_uploader_wrapper.py/d' depot_tools/autoninja
                      cd depot_tools
                      patch gclient.py -R <<'EOF'
                      676,677c676
                      <         packages = dep_value.get('packages', [])
                      <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                      ---
                      >         for package in dep_value.get('packages', []):
                      EOF
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: add deps
                  identifier: add_deps
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail
                      echo 'export PATH="$PATH:'"$PWD"'/depot_tools"'
                      export PATH="$PATH:/harness/depot_tools"
                      echo $BASH_ENV
                      export BASH_ENV=$PATH
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: free space
                  identifier: free_space
                  spec:
                    shell: Sh
                    command: |-
                      sudo mkdir -p $TMPDIR/del-target

                        tmpify() {
                          if [ -d "$1" ]; then
                            sudo mv "$1" $TMPDIR/del-target/$(echo $1|shasum -a 256|head -n1|cut -d " " -f1)
                          fi
                        }

                          strip_arm_deep() {
                          opwd=$(pwd)
                          cd $1
                          f=$(find . -perm +111 -type f)
                          for fp in $f
                          do
                            if [[ $(file "$fp") == *"universal binary"* ]]; then
                              if [[ $(file "$fp") == *"arm64e)"* ]]; then
                                sudo lipo -remove arm64e "$fp" -o "$fp" || true
                              fi
                              if [[ $(file "$fp") == *"arm64)"* ]]; then
                                sudo lipo -remove arm64 "$fp" -o "$fp" || true
                              fi
                            fi
                          done

                          cd $opwd
                        }

                        tmpify /Library/Developer/CoreSimulator
                        tmpify ~/Library/Developer/CoreSimulator
                        tmpify $(xcode-select -p)/Platforms/AppleTVOS.platform
                        tmpify $(xcode-select -p)/Platforms/iPhoneOS.platform
                        tmpify $(xcode-select -p)/Platforms/WatchOS.platform
                        tmpify $(xcode-select -p)/Platforms/WatchSimulator.platform
                        tmpify $(xcode-select -p)/Platforms/AppleTVSimulator.platform
                        tmpify $(xcode-select -p)/Platforms/iPhoneSimulator.platform
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/metal/ios
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0
                        tmpify ~/.rubies
                        tmpify ~/Library/Caches/Homebrew
                        tmpify /usr/local/Homebrew
                        sudo rm -rf $TMPDIR/del-target

                        # sudo rm -rf "/System/Library/Desktop Pictures"
                        # sudo rm -rf /System/Library/Templates/Data
                        # sudo rm -rf /System/Library/Speech/Voices
                        # sudo rm -rf "/System/Library/Screen Savers"
                        # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs
                        # sudo rm -rf "/System/Volumes/Data/Library/Application Support/Apple/Photos/Print Products"
                        # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/
                        # sudo rm -rf /System/Volumes/Data/Library/Java
                        # sudo rm -rf /System/Volumes/Data/Library/Ruby
                        # sudo rm -rf /System/Volumes/Data/Library/Printers
                        # sudo rm -rf /System/iOSSupport
                        # sudo rm -rf /System/Applications/*.app
                        # sudo rm -rf /System/Applications/Utilities/*.app
                        # sudo rm -rf /System/Library/LinguisticData
                        # sudo rm -rf /System/Volumes/Data/private/var/db/dyld/*
                        # sudo rm -rf /System/Library/Fonts/*
                        # sudo rm -rf /System/Library/PreferencePanes
                        # sudo rm -rf /System/Library/AssetsV2/*
                        sudo rm -rf /Applications/Safari.app
                        sudo rm -rf ~/project/src/build/linux
                        sudo rm -rf ~/project/src/third_party/catapult/tracing/test_data
                        sudo rm -rf ~/project/src/third_party/angle/third_party/VK-GL-CTS

                        # lipo off some huge binaries arm64 versions to save space
                        strip_arm_deep $(xcode-select -p)/ ./SharedFrameworks
                        # strip_arm_deep /System/Volumes/Data/Library/Developer/CommandLineTools/usr
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Run_5
                  identifier: Run_5
                  spec:
                    shell: Bash
                    command: node script/generate-deps-hash.js && cat .depshash-target
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Run_6
                  identifier: Run_6
                  spec:
                    shell: Sh
                    command: |-
                      touch .circle-sync-done
                      ls
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Run_7
                  identifier: Run_7
                  spec:
                    shell: Sh
                    command: |-
                      sudo mkdir -p /var/portal
                      sudo chown -R $(id -u):$(id -g) /var/portal
                  when:
                    stageStatus: All
                  failureStrategies: []
          sharedPaths:
            - /src/electron/
    - stage:
        name: linux-make-src-cache-test
        identifier: linuxmakesrccachetest
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Install gnu-tar on macos
                  identifier: Install_gnutar_on_macos
                  spec:
                    connectorRef: harnessdocker
                    image: curlimages/curl:7.87.0
                    shell: Sh
                    command: |
                      #!/bin/bash -eo pipefail
                      if [ "`uname`" == "Darwin" ]; then
                        if [ ! -d /usr/local/Cellar/gnu-tar/ ]; then
                          brew update
                          brew install gnu-tar
                        fi
                        ln -fs /usr/local/bin/gtar /usr/local/bin/tar
                      fi
                    envVariables:
                      IS_ELECTRON_RUNNER: "1"
                      ELECTRON_OUT_DIR: Default
                      NUMBER_OF_NINJA_PROCESSES: "34"
                      GCLIENT_EXTRA_ARGS: "--custom-var=checkout_arm=True --custom-var=checkout_arm64=True"
              - step:
                  type: Run
                  name: Install python2 on mac
                  identifier: Install_python2_on_mac
                  spec:
                    connectorRef: harnessdocker
                    image: curlimages/curl:7.87.0
                    shell: Sh
                    command: |-
                      if [ "`uname`" == "Darwin" ] && [ "$IS_ELECTRON_RUNNER" != "1" ]; then
                        if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
                          mkdir python-downloads
                          echo 'Downloading Python 2.7.18'
                          curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
                          mv python-2.7.18-macosx10.9.pkg python-downloads
                        else
                          echo 'Using Python install from cache'
                        fi
                        sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /        
                      fi
                    envVariables:
                      IS_ELECTRON_RUNNER: "1"
                      ELECTRON_OUT_DIR: Default
                      NUMBER_OF_NINJA_PROCESSES: "34"
                      GCLIENT_EXTRA_ARGS: "--custom-var=checkout_arm=True --custom-var=checkout_arm64=True"
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: SaveCacheGCS
                  name: Persisting python cache
                  identifier: Persisting_python_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v2.7.18-python-cache-{{ arch }}
                    sourcePaths:
                      - python-downloads
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: SaveCacheGCS
                  name: Persisting brew cache
                  identifier: Persisting_brew_cache
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v5-brew-cache-{{ arch }}
                    sourcePaths:
                      - /usr/local/Cellar/gnu-tar
                      - /usr/local/bin/gtar
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
              - step:
                  type: Run
                  name: Get depot tools
                  identifier: Get_depot_tools
                  spec:
                    shell: Bash
                    command: |-
                      git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
                      cd depot_tools
                      git fetch --depth 1 origin b7d8efd8bee494f4cfacacc19cf50fc4d4be3900
                      git checkout b7d8efd8bee494f4cfacacc19cf50fc4d4be3900
                      touch .disable_auto_update
                      cd ..
                      if [ "`uname`" == "Darwin" ]; then
                        # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
                        sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                      else
                        sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
                        # Remove swift-format dep from cipd on macOS until we send a patch upstream.
                        cd depot_tools
                        patch gclient.py -R <<'EOF'
                      676,677c676
                      <         packages = dep_value.get('packages', [])
                      <         for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
                      ---
                      >         for package in dep_value.get('packages', []):
                      EOF
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Add depot tools to path
                  identifier: Add_depot_tools_to_path
                  spec:
                    shell: Bash
                    command: |-
                      #!/bin/bash -eo pipefail
                      echo 'export PATH="$PATH:'"$PWD"'/depot_tools"'
                      export PATH="$PATH:/harness/depot_tools"
                      echo $BASH_ENV
                      export BASH_ENV=$PATH
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Freeup space on MacOS
                  identifier: Freeup_space_on_MacOS
                  spec:
                    shell: Bash
                    command: |-
                      #!/bin/bash -eo pipefail
                      if [ "`uname`" == "Darwin" ]; then
                        sudo mkdir -p $TMPDIR/del-target

                        tmpify() {
                          if [ -d "$1" ]; then
                            sudo mv "$1" $TMPDIR/del-target/$(echo $1|shasum -a 256|head -n1|cut -d " " -f1)
                          fi
                        }

                        strip_arm_deep() {
                          opwd=$(pwd)
                          cd $1
                          f=$(find . -perm +111 -type f)
                          for fp in $f
                          do
                            if [[ $(file "$fp") == *"universal binary"* ]]; then
                              if [[ $(file "$fp") == *"arm64e)"* ]]; then
                                sudo lipo -remove arm64e "$fp" -o "$fp" || true
                              fi
                              if [[ $(file "$fp") == *"arm64)"* ]]; then
                                sudo lipo -remove arm64 "$fp" -o "$fp" || true
                              fi
                            fi
                          done

                          cd $opwd
                        }

                        tmpify /Library/Developer/CoreSimulator
                        tmpify ~/Library/Developer/CoreSimulator
                        tmpify $(xcode-select -p)/Platforms/AppleTVOS.platform
                        tmpify $(xcode-select -p)/Platforms/iPhoneOS.platform
                        tmpify $(xcode-select -p)/Platforms/WatchOS.platform
                        tmpify $(xcode-select -p)/Platforms/WatchSimulator.platform
                        tmpify $(xcode-select -p)/Platforms/AppleTVSimulator.platform
                        tmpify $(xcode-select -p)/Platforms/iPhoneSimulator.platform
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/metal/ios
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift
                        tmpify $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0
                        tmpify ~/.rubies
                        tmpify ~/Library/Caches/Homebrew
                        tmpify /usr/local/Homebrew
                        sudo rm -rf $TMPDIR/del-target

                        # sudo rm -rf "/System/Library/Desktop Pictures"
                        # sudo rm -rf /System/Library/Templates/Data
                        # sudo rm -rf /System/Library/Speech/Voices
                        # sudo rm -rf "/System/Library/Screen Savers"
                        # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs
                        # sudo rm -rf "/System/Volumes/Data/Library/Application Support/Apple/Photos/Print Products"
                        # sudo rm -rf /System/Volumes/Data/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/
                        # sudo rm -rf /System/Volumes/Data/Library/Java
                        # sudo rm -rf /System/Volumes/Data/Library/Ruby
                        # sudo rm -rf /System/Volumes/Data/Library/Printers
                        # sudo rm -rf /System/iOSSupport
                        # sudo rm -rf /System/Applications/*.app
                        # sudo rm -rf /System/Applications/Utilities/*.app
                        # sudo rm -rf /System/Library/LinguisticData
                        # sudo rm -rf /System/Volumes/Data/private/var/db/dyld/*
                        # sudo rm -rf /System/Library/Fonts/*
                        # sudo rm -rf /System/Library/PreferencePanes
                        # sudo rm -rf /System/Library/AssetsV2/*
                        sudo rm -rf /Applications/Safari.app
                        sudo rm -rf ~/project/src/build/linux
                        sudo rm -rf ~/project/src/third_party/catapult/tracing/test_data
                        sudo rm -rf ~/project/src/third_party/angle/third_party/VK-GL-CTS

                        # lipo off some huge binaries arm64 versions to save space
                        strip_arm_deep $(xcode-select -p)/../SharedFrameworks
                        # strip_arm_deep /System/Volumes/Data/Library/Developer/CommandLineTools/usr
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Generate deps hash
                  identifier: Generate_deps_hash
                  spec:
                    shell: Bash
                    command: node script/generate-deps-hash.js && cat .depshash-target
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Touch sync done
                  identifier: Touch_sync_done
                  spec:
                    shell: Bash
                    command: |
                      touch .circle-sync-done
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Prepare for cross OS sync restore
                  identifier: Prepare_for_cross_OS_sync_restore
                  spec:
                    shell: Bash
                    command: |-
                      sudo mkdir -p /var/portal
                      sudo chown -R $(id -u):$(id -g) /var/portal
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: RestoreCacheGCS
                  name: Restoring src cache marker
                  identifier: Restoring_src_cache_marker
                  spec:
                    connectorRef: gcpdhruba
                    bucket: test-electron
                    key: v16-src-cache-marker-{{ checksum "src/electron/.depshash" }}
                    archiveFormat: Tar
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Halt the job early if the src cache exists
                  identifier: Halt_the_job_early_if_the_src_cache_exists
                  spec:
                    shell: Bash
                    command: |2-
                                        if [ -f ".src-cache-marker" ]; then
                                          circleci-agent step halt
                                        fi
                  when:
                    stageStatus: All
                  failureStrategies: []
          sharedPaths:
            - /usr/local/Cellar/gnu-tar/
            - /usr/local/bin/gtar/
        variables:
          - name: GCLIENT_EXTRA_ARGS
            type: String
            description: ""
            value: "'--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'"
          - name: NUMBER_OF_NINJA_PROCESSES
            type: String
            description: ""
            value: "34"
          - name: ELECTRON_OUT_DIR
            type: String
            description: ""
            value: Default
  allowStageExecutions: true
